[
  {
    "word": "nextjs-locale-provider",
    "priority": 397,
    "definitions": [
      {
        "meaning": "A context provider for managing locale and internationalization in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Wrap your app with LocaleProvider to support multiple languages."
      }
    ],
    "syntax": "<LocaleProvider locale={locale}>{children}</LocaleProvider>",
    "examples": [
      "<LocaleProvider locale='en'><App /></LocaleProvider>"
    ],
    "synonyms": ["i18n provider"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "loʊˈkeɪl prəˈvaɪdər",
    "difficulty": "advanced",
    "category": "i18n",
    "bestPractice": "Store user locale in cookies or browser settings.",
    "relatedConcepts": ["i18n", "context"]
  },
  {
    "word": "nextjs-i18n-routing",
    "priority": 398,
    "definitions": [
      {
        "meaning": "A routing pattern for supporting multiple languages in Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use /en, /fr, /es routes for internationalization."
      }
    ],
    "syntax": "next.config.js i18n config",
    "examples": [
      "i18n: { locales: ['en', 'fr'], defaultLocale: 'en' }"
    ],
    "synonyms": ["internationalized routing"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "aɪ ˈeɪtʃ ˈeɪn ˈraʊtɪŋ",
    "difficulty": "advanced",
    "category": "i18n",
    "bestPractice": "Use locale subpaths or domains for SEO.",
    "relatedConcepts": ["i18n", "routing"]
  },
  {
    "word": "nextjs-date-fns",
    "priority": 399,
    "definitions": [
      {
        "meaning": "A pattern for using date-fns for date manipulation in Next.js.",
        "partOfSpeech": "pattern",
        "example": "Format and parse dates with date-fns."
      }
    ],
    "syntax": "import { format } from 'date-fns';",
    "examples": [
      "format(new Date(), 'yyyy-MM-dd')"
    ],
    "synonyms": ["date-fns"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "deɪt ɛf ɛn ɛs",
    "difficulty": "intermediate",
    "category": "utility",
    "bestPractice": "Use date-fns for tree-shakable date utilities.",
    "relatedConcepts": ["date", "utility"]
  },
  {
    "word": "nextjs-moment",
    "priority": 400,
    "definitions": [
      {
        "meaning": "A pattern for using Moment.js for date/time in Next.js.",
        "partOfSpeech": "pattern",
        "example": "Format dates with moment().format()."
      }
    ],
    "syntax": "import moment from 'moment';",
    "examples": [
      "moment().format('YYYY-MM-DD')"
    ],
    "synonyms": ["momentjs"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈmoʊmənt",
    "difficulty": "intermediate",
    "category": "utility",
    "bestPractice": "Prefer date-fns or dayjs for smaller bundle size.",
    "relatedConcepts": ["date", "utility"]
  },
  {
    "word": "nextjs-dayjs",
    "priority": 401,
    "definitions": [
      {
        "meaning": "A pattern for using dayjs for lightweight date manipulation in Next.js.",
        "partOfSpeech": "pattern",
        "example": "Format and parse dates with dayjs."
      }
    ],
    "syntax": "import dayjs from 'dayjs';",
    "examples": [
      "dayjs().format('YYYY-MM-DD')"
    ],
    "synonyms": ["dayjs"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "deɪ dʒeɪ ɛs",
    "difficulty": "intermediate",
    "category": "utility",
    "bestPractice": "Use dayjs for minimal date/time utilities.",
    "relatedConcepts": ["date", "utility"]
  },
  {
    "word": "nextjs-number-format",
    "priority": 402,
    "definitions": [
      {
        "meaning": "A pattern for formatting numbers for display in Next.js.",
        "partOfSpeech": "pattern",
        "example": "Format numbers as currency or percentages."
      }
    ],
    "syntax": "new Intl.NumberFormat(locale, options).format(number)",
    "examples": [
      "new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(1234.56)"
    ],
    "synonyms": ["number formatting"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈnʌmbər ˈfɔːrmæt",
    "difficulty": "intermediate",
    "category": "utility",
    "bestPractice": "Use Intl.NumberFormat for i18n support.",
    "relatedConcepts": ["i18n", "utility"]
  },
  {
    "word": "nextjs-intl-provider",
    "priority": 403,
    "definitions": [
      {
        "meaning": "A context provider for internationalization using react-intl or similar.",
        "partOfSpeech": "pattern",
        "example": "Wrap app with IntlProvider for i18n."
      }
    ],
    "syntax": "<IntlProvider locale={locale} messages={messages}>{children}</IntlProvider>",
    "examples": [
      "<IntlProvider locale='en' messages={msgs}><App /></IntlProvider>"
    ],
    "synonyms": ["intl provider"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɪntəl prəˈvaɪdər",
    "difficulty": "advanced",
    "category": "i18n",
    "bestPractice": "Load messages dynamically for each locale.",
    "relatedConcepts": ["i18n", "context"]
  },
  {
    "word": "nextjs-rtl-support",
    "priority": 404,
    "definitions": [
      {
        "meaning": "A pattern for supporting right-to-left (RTL) languages in Next.js.",
        "partOfSpeech": "pattern",
        "example": "Add dir='rtl' to html for Arabic/Hebrew."
      }
    ],
    "syntax": "<html dir='rtl'>",
    "examples": [
      "<div dir='rtl'>שלום</div>"
    ],
    "synonyms": ["rtl", "right-to-left"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ɑːr tiː ɛl",
    "difficulty": "advanced",
    "category": "i18n",
    "bestPractice": "Test UI in both LTR and RTL layouts.",
    "relatedConcepts": ["i18n", "styling"]
  },
  {
    "word": "nextjs-accessible-color-schemes",
    "priority": 405,
    "definitions": [
      {
        "meaning": "A pattern for ensuring color schemes meet accessibility standards.",
        "partOfSpeech": "pattern",
        "example": "Use high-contrast color palettes."
      }
    ],
    "syntax": "// Use WCAG-compliant colors",
    "examples": [
      "background: #000; color: #fff;"
    ],
    "synonyms": ["accessible colors"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əkˈsɛsəbəl ˈkʌlər skiːmz",
    "difficulty": "advanced",
    "category": "accessibility",
    "bestPractice": "Check contrast ratios with accessibility tools.",
    "relatedConcepts": ["accessibility", "styling"]
  },
  {
    "word": "nextjs-accessible-focus-ring",
    "priority": 406,
    "definitions": [
      {
        "meaning": "A pattern for visible focus indicators for keyboard users.",
        "partOfSpeech": "pattern",
        "example": "Show a focus ring on buttons and links."
      }
    ],
    "syntax": ":focus { outline: 2px solid #1976d2; }",
    "examples": [
      "button:focus { outline: 2px solid #1976d2; }"
    ],
    "synonyms": ["focus ring"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈfoʊkəs rɪŋ",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Never remove focus outlines for accessibility.",
    "relatedConcepts": ["accessibility", "ui"]
  },
  {
    "word": "nextjs-accessible-font-sizes",
    "priority": 407,
    "definitions": [
      {
        "meaning": "A pattern for using readable, scalable font sizes.",
        "partOfSpeech": "pattern",
        "example": "Set base font size to 16px or larger."
      }
    ],
    "syntax": "html { font-size: 16px; }",
    "examples": [
      "body { font-size: 1rem; }"
    ],
    "synonyms": ["accessible fonts"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əkˈsɛsəbəl fɒnt saɪzɪz",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Allow users to zoom or adjust font size.",
    "relatedConcepts": ["accessibility", "styling"]
  },
  {
    "word": "nextjs-accessible-contrast-toggle",
    "priority": 408,
    "definitions": [
      {
        "meaning": "A pattern for toggling high-contrast mode for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Add a button to toggle high-contrast mode."
      }
    ],
    "syntax": "<ContrastToggle />",
    "examples": [
      "<ContrastToggle />"
    ],
    "synonyms": ["contrast toggle"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈkɒntræst ˈtɒɡəl",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Remember user preference for contrast mode.",
    "relatedConcepts": ["accessibility", "ui"]
  },
  {
    "word": "nextjs-accessible-motion-toggle",
    "priority": 409,
    "definitions": [
      {
        "meaning": "A pattern for toggling reduced motion for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Respect prefers-reduced-motion media query."
      }
    ],
    "syntax": "@media (prefers-reduced-motion: reduce) { ... }",
    "examples": [
      "animation: none;"
    ],
    "synonyms": ["motion toggle"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈmoʊʃən ˈtɒɡəl",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Provide a UI toggle for users to reduce motion.",
    "relatedConcepts": ["accessibility", "ui"]
  },
  {
    "word": "nextjs-accessible-font-toggle",
    "priority": 410,
    "definitions": [
      {
        "meaning": "A pattern for toggling dyslexia-friendly or larger fonts.",
        "partOfSpeech": "pattern",
        "example": "Let users switch to accessible fonts."
      }
    ],
    "syntax": "<FontToggle />",
    "examples": [
      "<FontToggle />"
    ],
    "synonyms": ["font toggle"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "fɒnt ˈtɒɡəl",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Offer OpenDyslexic or similar fonts as options.",
    "relatedConcepts": ["accessibility", "ui"]
  },
  {
    "word": "nextjs-accessible-language-switcher",
    "priority": 411,
    "definitions": [
      {
        "meaning": "A pattern for accessible language switchers in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Switch language with a select or buttons."
      }
    ],
    "syntax": "<LanguageSwitcher />",
    "examples": [
      "<LanguageSwitcher />"
    ],
    "synonyms": ["language switcher"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈlæŋɡwɪdʒ ˈswɪtʃər",
    "difficulty": "intermediate",
    "category": "i18n",
    "bestPractice": "Announce language changes for screen readers.",
    "relatedConcepts": ["i18n", "accessibility"]
  },
  {
    "word": "nextjs-accessible-aria-live",
    "priority": 412,
    "definitions": [
      {
        "meaning": "A pattern for using aria-live regions for dynamic content.",
        "partOfSpeech": "pattern",
        "example": "Announce updates to screen readers."
      }
    ],
    "syntax": "<div aria-live='polite'>Message</div>",
    "examples": [
      "<div aria-live='assertive'>Form submitted</div>"
    ],
    "synonyms": ["aria-live"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə laɪv",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use polite for non-urgent, assertive for urgent updates.",
    "relatedConcepts": ["accessibility", "live region"]
  },
  {
    "word": "nextjs-accessible-aria-label",
    "priority": 413,
    "definitions": [
      {
        "meaning": "A pattern for using aria-label for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Label icons and buttons for screen readers."
      }
    ],
    "syntax": "<button aria-label='Close'>×</button>",
    "examples": [
      "<span aria-label='Info'>ℹ️</span>"
    ],
    "synonyms": ["aria-label"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈleɪbəl",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Describe the action or content clearly.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-describedby",
    "priority": 414,
    "definitions": [
      {
        "meaning": "A pattern for using aria-describedby for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Describe form fields or controls for screen readers."
      }
    ],
    "syntax": "<input aria-describedby='desc' />",
    "examples": [
      "<span id='desc'>Description</span>"
    ],
    "synonyms": ["aria-describedby"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə dɪˈskraɪbd baɪ",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Reference visible descriptions for clarity.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-labelledby",
    "priority": 415,
    "definitions": [
      {
        "meaning": "A pattern for using aria-labelledby for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Label groups of elements for screen readers."
      }
    ],
    "syntax": "<div aria-labelledby='label'>...</div>",
    "examples": [
      "<span id='label'>Title</span>"
    ],
    "synonyms": ["aria-labelledby"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈlɛbəl ˈbaɪ",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use for headings or group labels.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-controls",
    "priority": 416,
    "definitions": [
      {
        "meaning": "A pattern for using aria-controls for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Indicate which element is controlled by a button."
      }
    ],
    "syntax": "<button aria-controls='panel'>Show Panel</button>",
    "examples": [
      "<div id='panel'>Panel content</div>"
    ],
    "synonyms": ["aria-controls"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə kənˈtroʊlz",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Link controls to controlled elements for clarity.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-expanded",
    "priority": 417,
    "definitions": [
      {
        "meaning": "A pattern for using aria-expanded for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Indicate expanded/collapsed state of elements."
      }
    ],
    "syntax": "<button aria-expanded={open}>Toggle</button>",
    "examples": [
      "<div hidden={!open}>Panel</div>"
    ],
    "synonyms": ["aria-expanded"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ɪkˈspændɪd",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Update aria-expanded state on toggle.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-checked",
    "priority": 418,
    "definitions": [
      {
        "meaning": "A pattern for using aria-checked for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Indicate checked state of custom controls."
      }
    ],
    "syntax": "<div role='checkbox' aria-checked={checked}>Item</div>",
    "examples": [
      "<div role='checkbox' aria-checked='true'>Item</div>"
    ],
    "synonyms": ["aria-checked"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə tʃɛkt",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Sync aria-checked with UI state.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-selected",
    "priority": 419,
    "definitions": [
      {
        "meaning": "A pattern for using aria-selected for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Indicate selected state in lists or tabs."
      }
    ],
    "syntax": "<div role='option' aria-selected={selected}>Option</div>",
    "examples": [
      "<div role='option' aria-selected='true'>Option</div>"
    ],
    "synonyms": ["aria-selected"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə sɪˈlɛktɪd",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Update aria-selected on selection change.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-disabled",
    "priority": 420,
    "definitions": [
      {
        "meaning": "A pattern for using aria-disabled for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Indicate disabled state on custom controls."
      }
    ],
    "syntax": "<div role='button' aria-disabled='true'>Disabled</div>",
    "examples": [
      "<button aria-disabled='true'>Disabled</button>"
    ],
    "synonyms": ["aria-disabled"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə dɪsˈeɪbəld",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use aria-disabled for non-native controls.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-required",
    "priority": 421,
    "definitions": [
      {
        "meaning": "A pattern for using aria-required for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Indicate required fields in forms."
      }
    ],
    "syntax": "<input aria-required='true' />",
    "examples": [
      "<input aria-required='true' />"
    ],
    "synonyms": ["aria-required"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə rɪˈkwaɪərd",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use aria-required in addition to required attribute.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-valuenow",
    "priority": 422,
    "definitions": [
      {
        "meaning": "A pattern for using aria-valuenow for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Announce current value of sliders or progress bars."
      }
    ],
    "syntax": "<div role='progressbar' aria-valuenow={value} />",
    "examples": [
      "<div role='slider' aria-valuenow='50' />"
    ],
    "synonyms": ["aria-valuenow"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈvæljuː naʊ",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Keep aria-valuenow in sync with UI.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-valuemin",
    "priority": 423,
    "definitions": [
      {
        "meaning": "A pattern for using aria-valuemin for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Announce minimum value of sliders or progress bars."
      }
    ],
    "syntax": "<div role='progressbar' aria-valuemin={min} />",
    "examples": [
      "<div role='slider' aria-valuemin='0' />"
    ],
    "synonyms": ["aria-valuemin"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈvæljuː mɪn",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Provide min/max values for range controls.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-valuemax",
    "priority": 424,
    "definitions": [
      {
        "meaning": "A pattern for using aria-valuemax for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Announce maximum value of sliders or progress bars."
      }
    ],
    "syntax": "<div role='progressbar' aria-valuemax={max} />",
    "examples": [
      "<div role='slider' aria-valuemax='100' />"
    ],
    "synonyms": ["aria-valuemax"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈvæljuː mæks",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Provide min/max values for range controls.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-valuetext",
    "priority": 425,
    "definitions": [
      {
        "meaning": "A pattern for using aria-valuetext for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Provide a human-readable value for assistive tech."
      }
    ],
    "syntax": "<div role='slider' aria-valuetext='Medium' />",
    "examples": [
      "<div role='progressbar' aria-valuetext='Halfway' />"
    ],
    "synonyms": ["aria-valuetext"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈvæljuː tɛkst",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use for non-numeric or complex values.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-hidden",
    "priority": 426,
    "definitions": [
      {
        "meaning": "A pattern for using aria-hidden for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Hide decorative elements from screen readers."
      }
    ],
    "syntax": "<div aria-hidden='true'>Icon</div>",
    "examples": [
      "<span aria-hidden='true'>★</span>"
    ],
    "synonyms": ["aria-hidden"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈhɪdən",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use for purely decorative or redundant elements.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-role",
    "priority": 427,
    "definitions": [
      {
        "meaning": "A pattern for using ARIA roles for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Assign roles to custom components."
      }
    ],
    "syntax": "<div role='button'>Click me</div>",
    "examples": [
      "<div role='tablist'>...</div>"
    ],
    "synonyms": ["aria role"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə roʊl",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use correct roles for custom widgets.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-owns",
    "priority": 428,
    "definitions": [
      {
        "meaning": "A pattern for using aria-owns for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Define parent-child relationships for screen readers."
      }
    ],
    "syntax": "<div aria-owns='child1 child2'>Parent</div>",
    "examples": [
      "<div id='child1'>Child 1</div>"
    ],
    "synonyms": ["aria-owns"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə oʊnz",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use for complex UI with non-DOM relationships.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-activedescendant",
    "priority": 429,
    "definitions": [
      {
        "meaning": "A pattern for using aria-activedescendant for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Track active child in composite widgets."
      }
    ],
    "syntax": "<div aria-activedescendant='item-3'>...</div>",
    "examples": [
      "<div id='item-3'>Active item</div>"
    ],
    "synonyms": ["aria-activedescendant"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈæktɪvdɪˈsɛndənt",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Update on keyboard navigation.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-busy",
    "priority": 430,
    "definitions": [
      {
        "meaning": "A pattern for using aria-busy for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Indicate loading or busy state."
      }
    ],
    "syntax": "<div aria-busy='true'>Loading...</div>",
    "examples": [
      "<div aria-busy='true'>Loading...</div>"
    ],
    "synonyms": ["aria-busy"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˈbɪzi",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Set aria-busy while content is updating.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-atomic",
    "priority": 431,
    "definitions": [
      {
        "meaning": "A pattern for using aria-atomic for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Announce entire region on update."
      }
    ],
    "syntax": "<div aria-atomic='true'>Message</div>",
    "examples": [
      "<div aria-atomic='true'>All content updated</div>"
    ],
    "synonyms": ["aria-atomic"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə əˈtɒmɪk",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use for regions that must be announced as a whole.",
    "relatedConcepts": ["accessibility", "aria"]
  },
  {
    "word": "nextjs-accessible-aria-multiselectable",
    "priority": 432,
    "definitions": [
      {
        "meaning": "A pattern for using aria-multiselectable for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Allow multiple selection in listboxes."
      }
    ],
    "syntax": "<div role='listbox' aria-multiselectable='true'>...</div>",
    "examples": [
      "<div role='listbox' aria-multiselectable='true'>...</div>"
    ],
    "synonyms": ["aria-multiselectable"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈɛəriə ˌmʌltisɪˈlɛktəbəl",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use for multi-select widgets.",
    "relatedConcepts": ["accessibility", "aria"]
  }
]
