{
  "words": [
    {
      "priority": 1,
      "word": "JavaScript",
      "part_of_speech": "noun",
      "definition": "A dynamic, high-level programming language used to create interactive and dynamic features on web pages.",
      "example": "JavaScript powers animations, forms, and interactive elements on websites.",
      "examples": ["JavaScript is essential for modern web development."],
      "frequency_rank": 1,
      "tags": ["language", "web", "programming"],
      "related": ["HTML", "CSS", "DOM"],
      "synonyms": ["JS"],
      "antonyms": [],
      "pronunciation": "ˈdʒɑːvəˌskrɪpt",
      "tts_text": "JavaScript",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Standard for client-side scripting since 1995.[1][2][3][4]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 2,
      "word": "variable",
      "part_of_speech": "noun",
      "definition": "A container for storing data values in JavaScript, declared with var, let, or const.",
      "example": "let name = 'Alice';",
      "examples": ["Variables can store numbers, strings, or objects."],
      "frequency_rank": 2,
      "tags": ["JavaScript", "syntax"],
      "related": ["data type", "assignment"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈvɛəriəbl",
      "tts_text": "variable",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "let and const are modern best practice.[1][2][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 3,
      "word": "data type",
      "part_of_speech": "noun",
      "definition": "A classification of data in JavaScript, such as number, string, boolean, object, null, undefined, symbol, or BigInt.",
      "example": "let age = 25; // number",
      "examples": ["JavaScript is dynamically typed."],
      "frequency_rank": 3,
      "tags": ["JavaScript", "syntax"],
      "related": ["variable", "primitive"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈdeɪtə taɪp",
      "tts_text": "data type",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Supports both primitive and reference types.[4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 4,
      "word": "operator",
      "part_of_speech": "noun",
      "definition": "A symbol or keyword in JavaScript that performs operations on values, such as +, -, *, /, =, ==, ===.",
      "example": "let sum = 2 + 3;",
      "examples": ["Operators are used for math and logic."],
      "frequency_rank": 4,
      "tags": ["JavaScript", "syntax"],
      "related": ["expression", "variable"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɒpəˌreɪtər",
      "tts_text": "operator",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Includes arithmetic, comparison, logical, and assignment.[1][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 5,
      "word": "function",
      "part_of_speech": "noun",
      "definition": "A reusable block of code in JavaScript that performs a specific task, optionally taking inputs and returning a value.",
      "example": "function add(a, b) { return a + b; }",
      "examples": ["Functions can be declared or assigned to variables."],
      "frequency_rank": 5,
      "tags": ["JavaScript", "syntax"],
      "related": ["parameter", "return", "arrow function"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈfʌŋkʃən",
      "tts_text": "function",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Functions are first-class citizens.[1][2][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 6,
      "word": "parameter",
      "part_of_speech": "noun",
      "definition": "A variable listed as part of a function's definition, representing an input value.",
      "example": "function greet(name) { alert(name); }",
      "examples": ["Parameters receive arguments when a function is called."],
      "frequency_rank": 6,
      "tags": ["JavaScript", "syntax"],
      "related": ["function", "argument"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "pəˈræmɪtər",
      "tts_text": "parameter",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Parameters are placeholders for input values.[1][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 7,
      "word": "argument",
      "part_of_speech": "noun",
      "definition": "A value provided to a function when it is called, corresponding to a parameter.",
      "example": "greet('Alice'); // 'Alice' is the argument",
      "examples": ["Arguments are passed in function calls."],
      "frequency_rank": 7,
      "tags": ["JavaScript", "syntax"],
      "related": ["function", "parameter"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɑːrɡjəmənt",
      "tts_text": "argument",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Arguments are actual input values.[1][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 8,
      "word": "return",
      "part_of_speech": "keyword",
      "definition": "A JavaScript keyword used in functions to specify the value to be sent back to the caller.",
      "example": "return a + b;",
      "examples": ["Return ends function execution and outputs a value."],
      "frequency_rank": 8,
      "tags": ["JavaScript", "syntax"],
      "related": ["function", "expression"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈtɜːrn",
      "tts_text": "return",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Functions without return return undefined.[4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 9,
      "word": "expression",
      "part_of_speech": "noun",
      "definition": "Any valid set of literals, variables, operators, and functions that evaluates to a value in JavaScript.",
      "example": "2 + 3 is an expression with value 5.",
      "examples": ["Expressions can be assigned to variables."],
      "frequency_rank": 9,
      "tags": ["JavaScript", "syntax"],
      "related": ["statement", "operator"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪkˈsprɛʃən",
      "tts_text": "expression",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Expressions are building blocks of statements.[4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 10,
      "word": "statement",
      "part_of_speech": "noun",
      "definition": "A complete instruction in JavaScript that performs an action, such as declaring a variable or calling a function.",
      "example": "let x = 10; is a statement.",
      "examples": ["Statements are executed sequentially."],
      "frequency_rank": 10,
      "tags": ["JavaScript", "syntax"],
      "related": ["expression", "block"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈsteɪtmənt",
      "tts_text": "statement",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Statements can contain expressions.[4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 11,
      "word": "block",
      "part_of_speech": "noun",
      "definition": "A set of statements enclosed in curly braces { }, used in functions, loops, and conditionals.",
      "example": "if (x > 0) { alert('positive'); }",
      "examples": ["Blocks define scope for variables and functions."],
      "frequency_rank": 11,
      "tags": ["JavaScript", "syntax"],
      "related": ["statement", "scope"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "blɒk",
      "tts_text": "block",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Blocks create local scope in JS.[4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 12,
      "word": "scope",
      "part_of_speech": "noun",
      "definition": "The context in which variables and functions are accessible in JavaScript.",
      "example": "let x = 5; // x is only accessible in this scope.",
      "examples": ["Scope can be global, function, or block."],
      "frequency_rank": 12,
      "tags": ["JavaScript", "syntax"],
      "related": ["block", "variable"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "skoʊp",
      "tts_text": "scope",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "let and const are block-scoped.[4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 13,
      "word": "conditional",
      "part_of_speech": "noun",
      "definition": "A statement in JavaScript that executes code only if a specified condition is true, using if, else, or switch.",
      "example": "if (x > 10) { alert('big'); }",
      "examples": ["Conditionals control program flow."],
      "frequency_rank": 13,
      "tags": ["JavaScript", "syntax"],
      "related": ["statement", "operator"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "kənˈdɪʃənl",
      "tts_text": "conditional",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "if, else if, else, switch are conditionals.[1][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 14,
      "word": "loop",
      "part_of_speech": "noun",
      "definition": "A programming construct that repeats code execution while a condition is true, such as for, while, or do...while.",
      "example": "for (let i = 0; i < 5; i++) { ... }",
      "examples": ["Loops process arrays and repeat actions."],
      "frequency_rank": 14,
      "tags": ["JavaScript", "syntax"],
      "related": ["statement", "conditional"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "luːp",
      "tts_text": "loop",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "for, while, do...while are loop types.[4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 15,
      "word": "object",
      "part_of_speech": "noun",
      "definition": "A complex data structure in JavaScript that stores collections of key-value pairs.",
      "example": "let user = { name: 'Bob', age: 30 };",
      "examples": ["Objects can contain properties and methods."],
      "frequency_rank": 15,
      "tags": ["JavaScript", "data"],
      "related": ["property", "method"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɒbdʒɛkt",
      "tts_text": "object",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Objects are the core of JS data modeling.[1][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 16,
      "word": "property",
      "part_of_speech": "noun",
      "definition": "A named value in a JavaScript object, accessed with dot or bracket notation.",
      "example": "user.name // 'Bob'",
      "examples": ["Properties store data or methods in objects."],
      "frequency_rank": 16,
      "tags": ["JavaScript", "data"],
      "related": ["object", "method"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈprɒpərti",
      "tts_text": "property",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Properties can be strings, numbers, or symbols.[1][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 17,
      "word": "method",
      "part_of_speech": "noun",
      "definition": "A function stored as a property of an object in JavaScript.",
      "example": "user.greet = function() { alert('Hi'); }",
      "examples": ["Methods add behavior to objects."],
      "frequency_rank": 17,
      "tags": ["JavaScript", "data"],
      "related": ["object", "function"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɛθəd",
      "tts_text": "method",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Methods are called with parentheses.[1][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 18,
      "word": "array",
      "part_of_speech": "noun",
      "definition": "A list-like object in JavaScript for storing ordered collections of values.",
      "example": "let colors = ['red', 'green', 'blue'];",
      "examples": ["Arrays can store any type of value."],
      "frequency_rank": 18,
      "tags": ["JavaScript", "data"],
      "related": ["object", "loop"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "əˈreɪ",
      "tts_text": "array",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Arrays have zero-based indexing.[1][4][5][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 19,
      "word": "DOM",
      "part_of_speech": "noun",
      "definition": "The Document Object Model, a programming interface that represents the structure and content of HTML or XML documents as a tree of objects.",
      "example": "JavaScript can access and modify the DOM to update web pages dynamically.",
      "examples": ["The DOM allows scripts to change content, structure, and styles."],
      "frequency_rank": 19,
      "tags": ["JavaScript", "web", "API"],
      "related": ["document", "element", "node"],
      "synonyms": ["Document Object Model"],
      "antonyms": [],
      "pronunciation": "diː oʊ ɛm",
      "tts_text": "DOM",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Central to all web scripting and manipulation.[1][2][3][4][6][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 20,
      "word": "element",
      "part_of_speech": "noun",
      "definition": "A single node in the DOM tree representing an HTML or XML tag.",
      "example": "const button = document.querySelector('button');",
      "examples": ["Elements can be selected and manipulated with JavaScript."],
      "frequency_rank": 20,
      "tags": ["JavaScript", "DOM"],
      "related": ["DOM", "node"],
      "synonyms": ["node"],
      "antonyms": [],
      "pronunciation": "ˈɛlɪmənt",
      "tts_text": "element",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Elements have properties, attributes, and children.[1][2][3][4][6][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 21,
      "word": "node",
      "part_of_speech": "noun",
      "definition": "Any object in the DOM tree, including elements, text, comments, and the document itself.",
      "example": "Every element and text in the DOM is a node.",
      "examples": ["Nodes can be traversed, created, or removed."],
      "frequency_rank": 21,
      "tags": ["JavaScript", "DOM"],
      "related": ["element", "document"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "noʊd",
      "tts_text": "node",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Node is the generic interface for all DOM objects.[1][2][3][4][6][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 22,
      "word": "document",
      "part_of_speech": "noun",
      "definition": "The root node of the DOM tree, representing the entire HTML or XML document.",
      "example": "document.getElementById('main') selects an element.",
      "examples": ["document is the entry point for DOM scripting."],
      "frequency_rank": 22,
      "tags": ["JavaScript", "DOM"],
      "related": ["DOM", "element"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈdɒkjəmənt",
      "tts_text": "document",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "document is a global object in browsers.[1][2][3][4][6][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 23,
      "word": "querySelector",
      "part_of_speech": "function",
      "definition": "A JavaScript method that returns the first DOM element matching a CSS selector.",
      "example": "document.querySelector('.btn') selects the first element with class 'btn'.",
      "examples": ["querySelector supports all CSS selector syntax."],
      "frequency_rank": 23,
      "tags": ["JavaScript", "DOM"],
      "related": ["element", "selector"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈkwɪri sɪˈlɛktər",
      "tts_text": "querySelector",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "querySelectorAll returns all matching elements.[1][2][4][6][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 24,
      "word": "getElementById",
      "part_of_speech": "function",
      "definition": "A JavaScript method that returns the DOM element with a specified id attribute.",
      "example": "document.getElementById('header') returns the header element.",
      "examples": ["getElementById is fast and widely used."],
      "frequency_rank": 24,
      "tags": ["JavaScript", "DOM"],
      "related": ["element", "selector"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɡɛt ˈɛlɪmənt baɪ aɪ diː",
      "tts_text": "getElementById",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Returns null if no element is found.[1][2][4][6][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 25,
      "word": "innerHTML",
      "part_of_speech": "property",
      "definition": "A property of DOM elements that gets or sets the HTML markup contained within the element.",
      "example": "element.innerHTML = '<b>Hello</b>';",
      "examples": ["innerHTML can change or read HTML content."],
      "frequency_rank": 25,
      "tags": ["JavaScript", "DOM"],
      "related": ["element", "textContent"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌɪnər eɪtʃ tiː ɛm ɛl",
      "tts_text": "innerHTML",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Use with care to avoid XSS risks.[1][3][4][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 26,
      "word": "textContent",
      "part_of_speech": "property",
      "definition": "A property of DOM elements that gets or sets the text content of an element, ignoring any HTML tags.",
      "example": "element.textContent = 'Hello';",
      "examples": ["textContent is safer than innerHTML for plain text."],
      "frequency_rank": 26,
      "tags": ["JavaScript", "DOM"],
      "related": ["element", "innerHTML"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "tɛkst ˈkɒntɛnt",
      "tts_text": "textContent",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Does not parse or render HTML tags.[1][3][4][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 27,
      "word": "createElement",
      "part_of_speech": "function",
      "definition": "A JavaScript method that creates a new DOM element of a specified type.",
      "example": "const div = document.createElement('div');",
      "examples": ["createElement is used for dynamic content."],
      "frequency_rank": 27,
      "tags": ["JavaScript", "DOM"],
      "related": ["appendChild", "element"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "kriˈeɪt ɛlɪmənt",
      "tts_text": "createElement",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Element must be added to DOM tree to appear.[1][2][3][4][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 28,
      "word": "appendChild",
      "part_of_speech": "function",
      "definition": "A JavaScript method that adds a node as the last child of a parent node in the DOM.",
      "example": "parent.appendChild(newDiv);",
      "examples": ["appendChild is used to build dynamic UIs."],
      "frequency_rank": 28,
      "tags": ["JavaScript", "DOM"],
      "related": ["createElement", "removeChild"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "əˈpɛnd tʃaɪld",
      "tts_text": "appendChild",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Returns the appended node.[1][2][3][4][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 29,
      "word": "removeChild",
      "part_of_speech": "function",
      "definition": "A JavaScript method that removes a child node from its parent in the DOM.",
      "example": "parent.removeChild(child);",
      "examples": ["removeChild detaches elements from the DOM tree."],
      "frequency_rank": 29,
      "tags": ["JavaScript", "DOM"],
      "related": ["appendChild", "element"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈmuːv tʃaɪld",
      "tts_text": "removeChild",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Returns the removed node.[1][2][3][4][6]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 30,
      "word": "classList",
      "part_of_speech": "property",
      "definition": "A property of DOM elements that provides methods to add, remove, or toggle CSS classes.",
      "example": "element.classList.add('active');",
      "examples": ["classList makes class manipulation easy."],
      "frequency_rank": 30,
      "tags": ["JavaScript", "DOM"],
      "related": ["element", "className"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "klæs lɪst",
      "tts_text": "classList",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Supports add, remove, toggle, contains methods.[3]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 31,
      "word": "setAttribute",
      "part_of_speech": "function",
      "definition": "A JavaScript method that sets the value of an attribute on a DOM element.",
      "example": "element.setAttribute('src', 'image.jpg');",
      "examples": ["setAttribute can add or update any attribute."],
      "frequency_rank": 31,
      "tags": ["JavaScript", "DOM"],
      "related": ["getAttribute", "removeAttribute"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "sɛt əˈtrɪbjuːt",
      "tts_text": "setAttribute",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Attributes include src, href, alt, etc.[3]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 32,
      "word": "getAttribute",
      "part_of_speech": "function",
      "definition": "A JavaScript method that retrieves the value of a specified attribute from a DOM element.",
      "example": "let src = element.getAttribute('src');",
      "examples": ["getAttribute returns null if the attribute does not exist."],
      "frequency_rank": 32,
      "tags": ["JavaScript", "DOM"],
      "related": ["setAttribute", "removeAttribute"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɡɛt əˈtrɪbjuːt",
      "tts_text": "getAttribute",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Common for reading src, alt, href, etc.[3]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 33,
      "word": "removeAttribute",
      "part_of_speech": "function",
      "definition": "A JavaScript method that removes a specified attribute from a DOM element.",
      "example": "element.removeAttribute('disabled');",
      "examples": ["removeAttribute deletes the attribute from the element."],
      "frequency_rank": 33,
      "tags": ["JavaScript", "DOM"],
      "related": ["setAttribute", "getAttribute"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈmuːv əˈtrɪbjuːt",
      "tts_text": "removeAttribute",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Removes any attribute by name.[3]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 34,
      "word": "event",
      "part_of_speech": "noun",
      "definition": "An action or occurrence detected by the browser, such as clicks, key presses, or page loads, which can trigger JavaScript code.",
      "example": "Clicking a button triggers a click event.",
      "examples": ["Events are handled with event listeners."],
      "frequency_rank": 34,
      "tags": ["JavaScript", "DOM"],
      "related": ["addEventListener", "handler"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪˈvɛnt",
      "tts_text": "event",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Common events: click, input, submit, load.[6][7][8][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 35,
      "word": "addEventListener",
      "part_of_speech": "function",
      "definition": "A JavaScript method that attaches an event handler to a DOM element for a specified event type.",
      "example": "button.addEventListener('click', handleClick);",
      "examples": ["addEventListener supports multiple handlers per event."],
      "frequency_rank": 35,
      "tags": ["JavaScript", "DOM"],
      "related": ["event", "handler"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "æd ɪˈvɛnt ˈlɪsənər",
      "tts_text": "addEventListener",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Preferred over inline event attributes.[6][7][8][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 36,
      "word": "handler",
      "part_of_speech": "noun",
      "definition": "A function in JavaScript that executes in response to an event on a DOM element.",
      "example": "function handleClick(event) { alert('Clicked!'); }",
      "examples": ["Handlers can be anonymous or named functions."],
      "frequency_rank": 36,
      "tags": ["JavaScript", "DOM"],
      "related": ["event", "addEventListener"],
      "synonyms": ["event handler"],
      "antonyms": [],
      "pronunciation": "ˈhændlər",
      "tts_text": "handler",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Receives an event object as argument.[6][7][8][9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    }
  ]
}
