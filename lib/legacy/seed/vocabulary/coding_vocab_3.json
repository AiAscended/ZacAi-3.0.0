{
  "words": [
    {
      "priority": 73,
      "word": "schema",
      "part_of_speech": "noun",
      "definition": "A structured definition of data shape, types, and validation rules, often used with JSON or databases.",
      "example": "Define a schema to validate incoming JSON data.",
      "examples": ["TypeScript interfaces can act as schemas."],
      "frequency_rank": 73,
      "tags": ["coding", "data"],
      "related": ["interface", "type", "validation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈskiːmə",
      "tts_text": "schema",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Schemas ensure data integrity.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 74,
      "word": "interface",
      "part_of_speech": "noun",
      "definition": "A TypeScript structure that defines the shape of an object, or a shared boundary for communication between software components.",
      "example": "Define a User interface to type user objects.",
      "examples": ["APIs provide interfaces for integration."],
      "frequency_rank": 74,
      "tags": ["coding", "TypeScript"],
      "related": ["type", "schema"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɪntərˌfeɪs",
      "tts_text": "interface",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Interfaces define contracts in TypeScript.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 75,
      "word": "type",
      "part_of_speech": "noun",
      "definition": "A TypeScript feature for declaring the structure and constraints of data.",
      "example": "Use type aliases for reusable data shapes.",
      "examples": ["Type safety prevents runtime errors."],
      "frequency_rank": 75,
      "tags": ["coding", "TypeScript"],
      "related": ["interface", "schema"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "taɪp",
      "tts_text": "type",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Types and interfaces are core to TypeScript.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 76,
      "word": "enum",
      "part_of_speech": "noun",
      "definition": "A TypeScript feature for defining a set of named constants.",
      "example": "Use enums for fixed sets of options.",
      "examples": ["enum Color { Red, Green, Blue }"],
      "frequency_rank": 76,
      "tags": ["coding", "TypeScript"],
      "related": ["type", "interface"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈiːnʌm",
      "tts_text": "enum",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Enums improve code clarity.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 77,
      "word": "generic",
      "part_of_speech": "adjective",
      "definition": "A TypeScript feature that allows functions and components to work with any data type.",
      "example": "Generics enable code reuse for different types.",
      "examples": ["function identity<T>(arg: T): T { return arg; }"],
      "frequency_rank": 77,
      "tags": ["coding", "TypeScript"],
      "related": ["type", "interface"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dʒəˈnɛrɪk",
      "tts_text": "generic",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Generics increase flexibility.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 78,
      "word": "immutable",
      "part_of_speech": "adjective",
      "definition": "Describes data that cannot be changed after creation.",
      "example": "State updates should be immutable.",
      "examples": ["Immutable data prevents side effects."],
      "frequency_rank": 78,
      "tags": ["coding", "practice"],
      "related": ["constant", "pure function"],
      "synonyms": [],
      "antonyms": ["mutable"],
      "pronunciation": "ɪˈmjuːtəbl",
      "tts_text": "immutable",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Immutability is a React best practice.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 79,
      "word": "pure function",
      "part_of_speech": "noun",
      "definition": "A function that returns the same output for the same input and has no side effects.",
      "example": "Reducers in Redux are pure functions.",
      "examples": ["Pure functions are easy to test."],
      "frequency_rank": 79,
      "tags": ["coding", "practice"],
      "related": ["immutable", "function"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "pjʊr ˈfʌŋkʃən",
      "tts_text": "pure function",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Pure functions are core to functional programming.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 80,
      "word": "side effect",
      "part_of_speech": "noun",
      "definition": "A change in state or interaction with the outside world that occurs during function execution, other than returning a value.",
      "example": "Fetching data in useEffect is a side effect.",
      "examples": ["Side effects are managed with hooks."],
      "frequency_rank": 80,
      "tags": ["coding", "practice"],
      "related": ["pure function", "effect"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "saɪd ɪˈfɛkt",
      "tts_text": "side effect",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Side effects are isolated in React hooks.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 81,
      "word": "effect",
      "part_of_speech": "noun",
      "definition": "A change or operation that occurs as a result of code execution, often handled by React's useEffect hook.",
      "example": "useEffect runs after component render.",
      "examples": ["Effects include data fetching and subscriptions."],
      "frequency_rank": 81,
      "tags": ["coding", "framework"],
      "related": ["side effect", "hook"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪˈfɛkt",
      "tts_text": "effect",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Effects are managed in React with hooks.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 82,
      "word": "reducer",
      "part_of_speech": "noun",
      "definition": "A function that determines changes to an application's state, often used with useReducer or Redux.",
      "example": "Reducers take state and action as arguments.",
      "examples": ["Reducers must be pure functions."],
      "frequency_rank": 82,
      "tags": ["coding", "framework"],
      "related": ["state", "pure function"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈduːsər",
      "tts_text": "reducer",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Reducers are used in advanced state management.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 83,
      "word": "dispatch",
      "part_of_speech": "verb",
      "definition": "To send an action to a reducer to update state.",
      "example": "Call dispatch to trigger a state change.",
      "examples": ["dispatch({ type: 'INCREMENT' })"],
      "frequency_rank": 83,
      "tags": ["coding", "framework"],
      "related": ["reducer", "action"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɪˈspætʃ",
      "tts_text": "dispatch",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Dispatch is used with useReducer and Redux.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 84,
      "word": "action",
      "part_of_speech": "noun",
      "definition": "An object that describes a change to state, usually with a type and payload.",
      "example": "Actions are dispatched to reducers.",
      "examples": ["{ type: 'LOGIN', user: userData }"],
      "frequency_rank": 84,
      "tags": ["coding", "framework"],
      "related": ["reducer", "dispatch"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈækʃən",
      "tts_text": "action",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Actions are core to Redux and useReducer.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 85,
      "word": "middleware (Redux)",
      "part_of_speech": "noun",
      "definition": "A function that intercepts actions before they reach the reducer, enabling logging, async, or other side effects.",
      "example": "Redux middleware handles async API calls.",
      "examples": ["Apply middleware for logging actions."],
      "frequency_rank": 85,
      "tags": ["coding", "framework"],
      "related": ["action", "reducer"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɪdəlˌwɛr",
      "tts_text": "middleware",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Middleware extends Redux functionality.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 86,
      "word": "store",
      "part_of_speech": "noun",
      "definition": "A centralized place to hold application state, typically used with Redux.",
      "example": "The Redux store contains the app's state tree.",
      "examples": ["Components subscribe to the store for updates."],
      "frequency_rank": 86,
      "tags": ["coding", "framework"],
      "related": ["reducer", "action"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "stɔːr",
      "tts_text": "store",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "The store is the source of truth in Redux.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 87,
      "word": "selector",
      "part_of_speech": "noun",
      "definition": "A function that extracts specific data from the store or state.",
      "example": "Use selectors to get user data from the store.",
      "examples": ["Selectors improve performance and readability."],
      "frequency_rank": 87,
      "tags": ["coding", "framework"],
      "related": ["store", "state"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "sɪˈlɛktər",
      "tts_text": "selector",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Selectors are often memoized.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 88,
      "word": "thunk",
      "part_of_speech": "noun",
      "definition": "A function that delays a computation or action, often used for async logic in Redux.",
      "example": "Redux Thunk enables async actions.",
      "examples": ["Dispatch a thunk to fetch data from an API."],
      "frequency_rank": 88,
      "tags": ["coding", "framework"],
      "related": ["middleware", "action"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "θʌŋk",
      "tts_text": "thunk",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Thunks are common in Redux async flows.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 89,
      "word": "token",
      "part_of_speech": "noun",
      "definition": "A piece of data used for authentication, authorization, or design (e.g., color tokens in theming).",
      "example": "JWT tokens secure API requests.",
      "examples": ["Design tokens define consistent colors and spacing."],
      "frequency_rank": 89,
      "tags": ["coding", "security"],
      "related": ["authentication", "theme"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈtoʊkən",
      "tts_text": "token",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Tokens are used in security and design.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 90,
      "word": "model",
      "part_of_speech": "noun",
      "definition": "A data structure representing real-world entities, or an AI system that processes and generates data.",
      "example": "The user model defines user data fields.",
      "examples": ["AI models generate text from prompts."],
      "frequency_rank": 90,
      "tags": ["coding", "AI"],
      "related": ["schema", "AI"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɒdəl",
      "tts_text": "model",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Models are used in both data and AI.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    }
  ]
}
