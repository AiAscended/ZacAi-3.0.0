{
  "words": [
    {
      "priority": 1,
      "word": "process",
      "part_of_speech": "noun",
      "definition": "An instance of a running program, with its own memory, environment, and system resources.",
      "example": "Each Node.js app runs in a separate process.",
      "examples": ["Processes can be managed and monitored on the server."],
      "frequency_rank": 1,
      "tags": ["system", "OS", "Node.js"],
      "related": ["thread", "memory"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈprəʊsɛs",
      "tts_text": "process",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Processes are isolated from each other.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 2,
      "word": "thread",
      "part_of_speech": "noun",
      "definition": "A sequence of executable instructions within a process, sharing memory with other threads of the same process.",
      "example": "Node.js uses a single main thread for JavaScript execution.",
      "examples": ["Threads enable concurrent operations in a process."],
      "frequency_rank": 2,
      "tags": ["system", "OS", "Node.js"],
      "related": ["process", "concurrency"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "θrɛd",
      "tts_text": "thread",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Node.js uses worker threads for parallelism.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 3,
      "word": "memory",
      "part_of_speech": "noun",
      "definition": "The part of a computer where data and program instructions are stored for quick access by the processor.",
      "example": "A process uses memory to store variables and data.",
      "examples": ["Memory leaks can crash a server."],
      "frequency_rank": 3,
      "tags": ["system", "OS"],
      "related": ["process", "heap", "stack"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɛməri",
      "tts_text": "memory",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "RAM is the main system memory.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 4,
      "word": "file system",
      "part_of_speech": "noun",
      "definition": "The method and data structures an operating system uses to keep track of files on a disk or partition.",
      "example": "Node.js uses the fs module to interact with the file system.",
      "examples": ["File systems organize data in directories and files."],
      "frequency_rank": 4,
      "tags": ["system", "OS", "Node.js"],
      "related": ["directory", "path", "file"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "faɪl ˈsɪstəm",
      "tts_text": "file system",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Common file systems: NTFS, ext4, HFS+.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 5,
      "word": "directory",
      "part_of_speech": "noun",
      "definition": "A folder in a file system that contains files or other directories.",
      "example": "The /home directory contains user files.",
      "examples": ["Directories help organize files on disk."],
      "frequency_rank": 5,
      "tags": ["system", "OS"],
      "related": ["file system", "file", "path"],
      "synonyms": ["folder"],
      "antonyms": [],
      "pronunciation": "dəˈrɛktəri",
      "tts_text": "directory",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Directories can be nested.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 6,
      "word": "file",
      "part_of_speech": "noun",
      "definition": "A collection of data stored on disk, identified by a name and path.",
      "example": "Config settings are saved in a JSON file.",
      "examples": ["Files can store code, data, or media."],
      "frequency_rank": 6,
      "tags": ["system", "OS"],
      "related": ["directory", "file system", "path"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "faɪl",
      "tts_text": "file",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Files have extensions like .js, .json, .log.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 7,
      "word": "path",
      "part_of_speech": "noun",
      "definition": "A string that specifies the location of a file or directory in a file system.",
      "example": "The path /var/www/index.html points to a web page.",
      "examples": ["Paths can be absolute or relative."],
      "frequency_rank": 7,
      "tags": ["system", "OS", "Node.js"],
      "related": ["file", "directory"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "pæθ",
      "tts_text": "path",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Node.js path module helps with path manipulation.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 8,
      "word": "environment variable",
      "part_of_speech": "noun",
      "definition": "A key-value pair in the operating system used to configure application settings and runtime behavior.",
      "example": "Set NODE_ENV=production to enable production mode.",
      "examples": ["Environment variables store secrets and configs."],
      "frequency_rank": 8,
      "tags": ["system", "OS", "Node.js"],
      "related": ["process", "config file"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪnˈvaɪrənmənt ˈvɛəriəbl",
      "tts_text": "environment variable",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Accessed in Node.js via process.env.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 9,
      "word": "permission",
      "part_of_speech": "noun",
      "definition": "A rule that determines what actions a user or process can perform on files, directories, or system resources.",
      "example": "File permissions control who can read or write files.",
      "examples": ["Permissions are set with chmod on Unix systems."],
      "frequency_rank": 9,
      "tags": ["system", "OS", "security"],
      "related": ["file", "user", "group"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "pərˈmɪʃən",
      "tts_text": "permission",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Incorrect permissions can cause security issues.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 10,
      "word": "signal",
      "part_of_speech": "noun",
      "definition": "A software interrupt sent to a process to notify it of events like termination or user requests.",
      "example": "SIGINT stops a process when you press Ctrl+C.",
      "examples": ["Signals can gracefully shut down servers."],
      "frequency_rank": 10,
      "tags": ["system", "OS"],
      "related": ["process", "handler"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈsɪɡnəl",
      "tts_text": "signal",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Node.js handles signals for shutdown and reload.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 11,
      "word": "user",
      "part_of_speech": "noun",
      "definition": "An account or identity on a computer system with specific permissions and access rights.",
      "example": "Each process runs as a specific user.",
      "examples": ["Users can belong to groups for permission management."],
      "frequency_rank": 11,
      "tags": ["system", "OS", "security"],
      "related": ["group", "permission"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈjuːzər",
      "tts_text": "user",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Root user has all permissions.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 12,
      "word": "group",
      "part_of_speech": "noun",
      "definition": "A collection of users on a system, used to manage permissions collectively.",
      "example": "A group can be given write access to a directory.",
      "examples": ["Groups simplify permission management."],
      "frequency_rank": 12,
      "tags": ["system", "OS", "security"],
      "related": ["user", "permission"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɡruːp",
      "tts_text": "group",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Users can belong to multiple groups.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 13,
      "word": "process id",
      "part_of_speech": "noun",
      "definition": "A unique number assigned by the operating system to each running process.",
      "example": "Use the process id (PID) to kill a process.",
      "examples": ["PID helps track and manage processes."],
      "frequency_rank": 13,
      "tags": ["system", "OS"],
      "related": ["process", "signal"],
      "synonyms": ["PID"],
      "antonyms": [],
      "pronunciation": "ˈprəʊsɛs aɪ diː",
      "tts_text": "process id",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Node.js exposes PID via process.pid.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 14,
      "word": "exit code",
      "part_of_speech": "noun",
      "definition": "A number returned by a process when it finishes, indicating success (0) or error (non-zero).",
      "example": "A script returns exit code 1 on failure.",
      "examples": ["Exit codes help automate error handling."],
      "frequency_rank": 14,
      "tags": ["system", "OS"],
      "related": ["process", "signal"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɛksɪt koʊd",
      "tts_text": "exit code",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Node.js sets exit code via process.exit().",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 15,
      "word": "log",
      "part_of_speech": "noun",
      "definition": "A record of events, errors, or messages generated by a program or system for monitoring and debugging.",
      "example": "Server logs help diagnose problems.",
      "examples": ["Logs are written to files or consoles."],
      "frequency_rank": 15,
      "tags": ["system", "OS", "Node.js"],
      "related": ["file", "monitoring"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "lɒɡ",
      "tts_text": "log",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Logging is key for debugging and auditing.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 16,
      "word": "monitoring",
      "part_of_speech": "noun",
      "definition": "The process of tracking system performance, resource usage, and application health in real time.",
      "example": "Monitoring tools alert admins to server issues.",
      "examples": ["Monitoring prevents downtime and detects anomalies."],
      "frequency_rank": 16,
      "tags": ["system", "OS", "DevOps"],
      "related": ["log", "alert"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɒnɪtərɪŋ",
      "tts_text": "monitoring",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Popular tools: Prometheus, Grafana.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 17,
      "word": "uptime",
      "part_of_speech": "noun",
      "definition": "The amount of time a system or application has been running without interruption.",
      "example": "High uptime is crucial for web servers.",
      "examples": ["Uptime is measured in hours, days, or months."],
      "frequency_rank": 17,
      "tags": ["system", "OS"],
      "related": ["monitoring", "log"],
      "synonyms": [],
      "antonyms": ["downtime"],
      "pronunciation": "ˈʌptaɪm",
      "tts_text": "uptime",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Uptime is a key metric for reliability.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 18,
      "word": "downtime",
      "part_of_speech": "noun",
      "definition": "The period when a system or application is unavailable or not operational.",
      "example": "Unexpected downtime can hurt user trust.",
      "examples": ["Downtime is minimized with monitoring and alerts."],
      "frequency_rank": 18,
      "tags": ["system", "OS"],
      "related": ["uptime", "monitoring"],
      "synonyms": [],
      "antonyms": ["uptime"],
      "pronunciation": "ˈdaʊntaɪm",
      "tts_text": "downtime",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Downtime can be scheduled or accidental.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 19,
      "word": "Node.js",
      "part_of_speech": "noun",
      "definition": "A JavaScript runtime built on Chrome's V8 engine, enabling server-side scripting and scalable network applications.",
      "example": "Node.js powers backend APIs and real-time apps.",
      "examples": ["Node.js uses non-blocking I/O for high performance."],
      "frequency_rank": 19,
      "tags": ["system", "server", "JavaScript"],
      "related": ["process", "event loop", "Express.js"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "noʊd dʒeɪ ɛs",
      "tts_text": "Node.js",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Popular for modern web servers and APIs."
    },
    {
      "priority": 20,
      "word": "event loop",
      "part_of_speech": "noun",
      "definition": "The core mechanism in Node.js that handles asynchronous operations by processing events and callbacks.",
      "example": "The event loop allows Node.js to handle many connections efficiently.",
      "examples": ["Non-blocking I/O is managed by the event loop."],
      "frequency_rank": 20,
      "tags": ["system", "Node.js"],
      "related": ["Node.js", "callback", "asynchronous"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪˈvɛnt luːp",
      "tts_text": "event loop",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Central to Node.js concurrency model."
    },
    {
      "priority": 21,
      "word": "asynchronous",
      "part_of_speech": "adjective",
      "definition": "Describes operations that occur independently of the main program flow, allowing other tasks to continue running.",
      "example": "Asynchronous code prevents blocking in servers.",
      "examples": ["Node.js uses async functions for I/O tasks."],
      "frequency_rank": 21,
      "tags": ["system", "Node.js"],
      "related": ["event loop", "callback", "promise"],
      "synonyms": [],
      "antonyms": ["synchronous"],
      "pronunciation": "ˌeɪˈsɪŋkrənəs",
      "tts_text": "asynchronous",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Async/await syntax simplifies async code."
    },
    {
      "priority": 22,
      "word": "callback",
      "part_of_speech": "noun",
      "definition": "A function passed as an argument to another function, to be executed after an operation completes.",
      "example": "fs.readFile uses a callback to handle file data.",
      "examples": ["Callbacks are common in asynchronous APIs."],
      "frequency_rank": 22,
      "tags": ["system", "Node.js"],
      "related": ["asynchronous", "event loop", "promise"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈkɔːlˌbæk",
      "tts_text": "callback",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Callback hell can be avoided with promises."
    },
    {
      "priority": 23,
      "word": "promise",
      "part_of_speech": "noun",
      "definition": "An object representing the eventual completion or failure of an asynchronous operation in JavaScript.",
      "example": "Promises simplify chaining async operations.",
      "examples": ["Promise-based APIs are standard in Node.js."],
      "frequency_rank": 23,
      "tags": ["system", "Node.js"],
      "related": ["asynchronous", "callback", "async/await"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈprɒmɪs",
      "tts_text": "promise",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Promises improve readability and error handling."
    },
    {
      "priority": 24,
      "word": "async/await",
      "part_of_speech": "syntax",
      "definition": "JavaScript syntax for writing asynchronous code that looks synchronous, built on top of promises.",
      "example": "Use async/await to simplify async logic.",
      "examples": ["await fetchData() pauses until resolved."],
      "frequency_rank": 24,
      "tags": ["system", "Node.js"],
      "related": ["promise", "asynchronous"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈeɪsɪŋk əˈweɪt",
      "tts_text": "async await",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Reduces callback nesting and errors."
    },
    {
      "priority": 25,
      "word": "Express.js",
      "part_of_speech": "noun",
      "definition": "A minimal and flexible Node.js web application framework for building APIs and web servers.",
      "example": "Express.js simplifies routing and middleware in Node.js.",
      "examples": ["Express is the de facto standard for Node.js apps."],
      "frequency_rank": 25,
      "tags": ["system", "Node.js", "server"],
      "related": ["Node.js", "middleware", "router"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪkˈsprɛs dʒeɪ ɛs",
      "tts_text": "Express.js",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Widely used for REST APIs and web servers."
    },
    {
      "priority": 26,
      "word": "middleware",
      "part_of_speech": "noun",
      "definition": "A function in Express.js that processes requests and responses, often for logging, authentication, or data parsing.",
      "example": "Middleware handles authentication in Express apps.",
      "examples": ["Middleware can be chained for modular logic."],
      "frequency_rank": 26,
      "tags": ["system", "Node.js", "Express"],
      "related": ["Express.js", "router"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɪdlˌwɛr",
      "tts_text": "middleware",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Runs before route handlers in Express."
    },
    {
      "priority": 27,
      "word": "router",
      "part_of_speech": "noun",
      "definition": "A component in Express.js that defines and handles HTTP request paths and methods.",
      "example": "Routers organize API endpoints by resource.",
      "examples": ["Express routers modularize route logic."],
      "frequency_rank": 27,
      "tags": ["system", "Node.js", "Express"],
      "related": ["Express.js", "middleware"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈraʊtər",
      "tts_text": "router",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Routers can be mounted at specific paths."
    },
    {
      "priority": 28,
      "word": "request",
      "part_of_speech": "noun",
      "definition": "An object representing an incoming HTTP request, containing data like headers, method, and body.",
      "example": "Express gives access to the request object in handlers.",
      "examples": ["Request objects hold URL, params, and payload."],
      "frequency_rank": 28,
      "tags": ["system", "Node.js", "Express"],
      "related": ["response", "router"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈkwɛst",
      "tts_text": "request",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "req is the standard variable name in Express."
    },
    {
      "priority": 29,
      "word": "response",
      "part_of_speech": "noun",
      "definition": "An object representing the HTTP response sent back to the client, allowing you to set status, headers, and body.",
      "example": "The response object sends JSON or HTML to clients.",
      "examples": ["Express uses res for the response object."],
      "frequency_rank": 29,
      "tags": ["system", "Node.js", "Express"],
      "related": ["request", "router"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈspɒns",
      "tts_text": "response",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "res is the standard variable name in Express."
    },
    {
      "priority": 30,
      "word": "status code",
      "part_of_speech": "noun",
      "definition": "A three-digit number in HTTP responses indicating the result of a request, such as 200 (OK) or 404 (Not Found).",
      "example": "Set status code 201 for successful creation.",
      "examples": ["Status codes help clients handle responses appropriately."],
      "frequency_rank": 30,
      "tags": ["system", "Node.js", "Express"],
      "related": ["response", "request"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈstætəs koʊd",
      "tts_text": "status code",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Common codes: 200, 201, 400, 404, 500."
    },
    {
      "priority": 31,
      "word": "error handling",
      "part_of_speech": "noun",
      "definition": "The process of catching, logging, and responding to errors in code to prevent crashes and provide useful feedback.",
      "example": "Express uses middleware for error handling.",
      "examples": ["Error handling improves reliability and debugging."],
      "frequency_rank": 31,
      "tags": ["system", "Node.js", "Express"],
      "related": ["middleware", "log"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɛrər ˈhændlɪŋ",
      "tts_text": "error handling",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Express error middleware has four arguments."
    },
    {
      "priority": 32,
      "word": "module",
      "part_of_speech": "noun",
      "definition": "A reusable piece of code in Node.js, defined in a separate file and imported as needed.",
      "example": "The fs module handles file operations.",
      "examples": ["Modules promote code reuse and organization."],
      "frequency_rank": 32,
      "tags": ["system", "Node.js"],
      "related": ["require", "import"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɒdjuːl",
      "tts_text": "module",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Node.js uses CommonJS and ES modules."
    },
    {
      "priority": 33,
      "word": "require",
      "part_of_speech": "function",
      "definition": "A Node.js function for importing modules using CommonJS syntax.",
      "example": "const fs = require('fs');",
      "examples": ["require loads built-in and custom modules."],
      "frequency_rank": 33,
      "tags": ["system", "Node.js"],
      "related": ["module", "import"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈkwaɪər",
      "tts_text": "require",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "ES modules use import instead of require."
    },
    {
      "priority": 34,
      "word": "import",
      "part_of_speech": "keyword",
      "definition": "A JavaScript keyword for importing modules using ES module syntax.",
      "example": "import fs from 'fs';",
      "examples": ["import is standard in modern JavaScript."],
      "frequency_rank": 34,
      "tags": ["system", "Node.js"],
      "related": ["module", "require"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪmˈpɔːrt",
      "tts_text": "import",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "import/export is standard in ES6+."
    },
    {
      "priority": 35,
      "word": "export",
      "part_of_speech": "keyword",
      "definition": "A JavaScript keyword for making functions, objects, or values available to other modules.",
      "example": "export function add(a, b) { return a + b; }",
      "examples": ["export enables modular code organization."],
      "frequency_rank": 35,
      "tags": ["system", "Node.js"],
      "related": ["module", "import"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɛkspɔːrt",
      "tts_text": "export",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Used with import for ES modules."
    },
    {
      "priority": 36,
      "word": "os module",
      "part_of_speech": "noun",
      "definition": "A Node.js core module providing operating system-related utility methods and properties.",
      "example": "The os module retrieves system info like CPU and memory.",
      "examples": ["os.platform() returns the OS type."],
      "frequency_rank": 36,
      "tags": ["system", "Node.js"],
      "related": ["Node.js", "process"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "oʊ ɛs ˈmɒdjuːl",
      "tts_text": "os module",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Useful for cross-platform scripts."
    }
  ]
}
