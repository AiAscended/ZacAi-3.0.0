[
  {
    "word": "nextjs-clipboard-provider",
    "priority": 361,
    "definitions": [
      {
        "meaning": "A pattern for providing clipboard context and actions across a React/Next.js app.",
        "partOfSpeech": "pattern",
        "example": "Wrap your app with a ClipboardProvider for global copy/paste."
      }
    ],
    "syntax": "<ClipboardProvider>{children}</ClipboardProvider>",
    "examples": [
      "<ClipboardProvider><App /></ClipboardProvider>"
    ],
    "synonyms": ["clipboard context"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈklɪpbɔːrd prəˈvaɪdər",
    "difficulty": "advanced",
    "category": "ui",
    "bestPractice": "Use context for global clipboard actions.",
    "relatedConcepts": ["ui", "clipboard", "context"]
  },
  {
    "word": "nextjs-theme-provider",
    "priority": 362,
    "definitions": [
      {
        "meaning": "A pattern for providing theme context and switching in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Wrap your app with ThemeProvider for dark/light mode."
      }
    ],
    "syntax": "<ThemeProvider theme={theme}>{children}</ThemeProvider>",
    "examples": [
      "<ThemeProvider theme={theme}><App /></ThemeProvider>"
    ],
    "synonyms": ["theme context"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "θiːm prəˈvaɪdər",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Store theme preference in localStorage or cookies.",
    "relatedConcepts": ["theme", "context", "provider"]
  },
  {
    "word": "nextjs-color-mode-toggle",
    "priority": 363,
    "definitions": [
      {
        "meaning": "A pattern for toggling between light and dark color modes in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Add a button to switch between light and dark themes."
      }
    ],
    "syntax": "<ColorModeToggle />",
    "examples": [
      "<ColorModeToggle />"
    ],
    "synonyms": ["color mode switch"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "ˈkʌlər moʊd ˈtɒɡəl",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Respect system color scheme preferences.",
    "relatedConcepts": ["theme", "provider"]
  },
  {
    "word": "nextjs-css-in-js",
    "priority": 364,
    "definitions": [
      {
        "meaning": "A pattern for styling components using JavaScript in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use styled-components, emotion, or styled-jsx."
      }
    ],
    "syntax": "const Button = styled.button`color: red;`",
    "examples": [
      "const Card = styled.div`background: #fff;`"
    ],
    "synonyms": ["css-in-js"],
    "antonyms": ["css modules", "global css"],
    "frequency": 10,
    "pronunciation": "siː ɛs ɛs ɪn dʒeɪ ɛs",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Use CSS-in-JS for dynamic and themeable styles.",
    "relatedConcepts": ["styling", "theme"]
  },
  {
    "word": "nextjs-css-variables",
    "priority": 365,
    "definitions": [
      {
        "meaning": "A pattern for using CSS custom properties (variables) in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Define and use CSS variables for theming."
      }
    ],
    "syntax": ":root { --primary: #0070f3; }",
    "examples": [
      "style={{ '--main-color': color }} as React.CSSProperties"
    ],
    "synonyms": ["css custom properties"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "siː ɛs ɛs ˈvɛriəblz",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Use variables for colors, spacing, and themes.",
    "relatedConcepts": ["styling", "theme"]
  },
  {
    "word": "nextjs-responsive-design",
    "priority": 366,
    "definitions": [
      {
        "meaning": "A pattern for making React/Next.js apps responsive to screen size.",
        "partOfSpeech": "pattern",
        "example": "Use media queries and responsive units."
      }
    ],
    "syntax": "@media (max-width: 600px) { ... }",
    "examples": [
      "className='md:hidden block'"
    ],
    "synonyms": ["responsive design"],
    "antonyms": [],
    "frequency": 10,
    "pronunciation": "rɪˈspɒnsɪv dɪˈzaɪn",
    "difficulty": "basic",
    "category": "styling",
    "bestPractice": "Test on multiple devices and breakpoints.",
    "relatedConcepts": ["styling", "media query"]
  },
  {
    "word": "nextjs-media-query-hook",
    "priority": 367,
    "definitions": [
      {
        "meaning": "A custom React hook for media queries in Next.js.",
        "partOfSpeech": "pattern",
        "example": "Detect device size with a useMediaQuery hook."
      }
    ],
    "syntax": "const isMobile = useMediaQuery('(max-width: 600px)');",
    "examples": [
      "const isTablet = useMediaQuery('(max-width: 900px)');"
    ],
    "synonyms": ["media query hook"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈmiːdiə ˈkwɛri hʊk",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Use hooks for responsive logic in JS.",
    "relatedConcepts": ["responsive design", "hook"]
  },
  {
    "word": "nextjs-breakpoints",
    "priority": 368,
    "definitions": [
      {
        "meaning": "A pattern for defining and using breakpoints in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Switch layouts at different screen widths."
      }
    ],
    "syntax": "const BREAKPOINTS = { mobile: 600, tablet: 900, desktop: 1200 };",
    "examples": [
      "if (width < BREAKPOINTS.mobile) { /* mobile UI */ }"
    ],
    "synonyms": ["breakpoints"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈbreɪkpɔɪnts",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Centralize breakpoints for consistency.",
    "relatedConcepts": ["responsive design", "media query"]
  },
  {
    "word": "nextjs-mobile-navigation",
    "priority": 369,
    "definitions": [
      {
        "meaning": "A pattern for mobile-friendly navigation in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use hamburger menus and bottom nav for mobile."
      }
    ],
    "syntax": "<MobileNav open={open} onToggle={toggleNav} />",
    "examples": [
      "<MobileNav open={show} onToggle={fn} />"
    ],
    "synonyms": ["mobile nav"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈmoʊbaɪl ˌnævɪˈɡeɪʃən",
    "difficulty": "intermediate",
    "category": "ui",
    "bestPractice": "Make navigation touch-friendly and accessible.",
    "relatedConcepts": ["responsive design", "navigation"]
  },
  {
    "word": "nextjs-desktop-navigation",
    "priority": 370,
    "definitions": [
      {
        "meaning": "A pattern for desktop navigation menus in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Show horizontal nav for desktop screens."
      }
    ],
    "syntax": "<DesktopNav items={items} />",
    "examples": [
      "<DesktopNav items={navItems} />"
    ],
    "synonyms": ["desktop nav"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈdɛskˌtɒp ˌnævɪˈɡeɪʃən",
    "difficulty": "intermediate",
    "category": "ui",
    "bestPractice": "Show clear navigation and highlight active page.",
    "relatedConcepts": ["navigation", "responsive design"]
  },
  {
    "word": "nextjs-mobile-first",
    "priority": 371,
    "definitions": [
      {
        "meaning": "A pattern for designing apps for mobile first, then scaling up.",
        "partOfSpeech": "pattern",
        "example": "Start with mobile layout, then add desktop features."
      }
    ],
    "syntax": "// Write base styles for mobile, add media queries for larger screens",
    "examples": [
      ".container { width: 100%; } @media (min-width: 600px) { .container { width: 80%; } }"
    ],
    "synonyms": ["mobile first"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈmoʊbaɪl fɜːrst",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Design for mobile users first.",
    "relatedConcepts": ["responsive design", "media query"]
  },
  {
    "word": "nextjs-desktop-first",
    "priority": 372,
    "definitions": [
      {
        "meaning": "A pattern for designing apps for desktop first, then scaling down.",
        "partOfSpeech": "pattern",
        "example": "Start with desktop layout, then adapt for mobile."
      }
    ],
    "syntax": "// Write base styles for desktop, add media queries for smaller screens",
    "examples": [
      ".container { width: 1200px; } @media (max-width: 600px) { .container { width: 100%; } }"
    ],
    "synonyms": ["desktop first"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈdɛskˌtɒp fɜːrst",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Design for desktop users if majority are on large screens.",
    "relatedConcepts": ["responsive design", "media query"]
  },
  {
    "word": "nextjs-print-styles",
    "priority": 373,
    "definitions": [
      {
        "meaning": "A pattern for adding print-specific CSS styles in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Format invoices or reports for printing."
      }
    ],
    "syntax": "@media print { ... }",
    "examples": [
      "@media print { .no-print { display: none; } }"
    ],
    "synonyms": ["print styles"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "prɪnt staɪlz",
    "difficulty": "intermediate",
    "category": "styling",
    "bestPractice": "Hide navigation and unnecessary UI in print.",
    "relatedConcepts": ["styling", "media query"]
  },
  {
    "word": "nextjs-accessible-forms",
    "priority": 374,
    "definitions": [
      {
        "meaning": "A pattern for building accessible forms in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Label all inputs and use semantic HTML."
      }
    ],
    "syntax": "<label htmlFor='name'>Name</label><input id='name' />",
    "examples": [
      "<input aria-required='true' />"
    ],
    "synonyms": ["accessible forms"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl fɔːrmz",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use fieldsets, legends, and ARIA attributes.",
    "relatedConcepts": ["accessibility", "form"]
  },
  {
    "word": "nextjs-accessible-navigation",
    "priority": 375,
    "definitions": [
      {
        "meaning": "A pattern for building accessible navigation in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use nav, aria-label, and keyboard navigation."
      }
    ],
    "syntax": "<nav aria-label='Main navigation'>{children}</nav>",
    "examples": [
      "<nav aria-label='Breadcrumb'><ol>...</ol></nav>"
    ],
    "synonyms": ["accessible navigation"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl ˌnævɪˈɡeɪʃən",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Ensure all navigation is keyboard accessible.",
    "relatedConcepts": ["accessibility", "navigation"]
  },
  {
    "word": "nextjs-accessible-modal",
    "priority": 376,
    "definitions": [
      {
        "meaning": "A pattern for building accessible modals in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Trap focus and provide ARIA roles in modals."
      }
    ],
    "syntax": "<Modal aria-modal='true' role='dialog' />",
    "examples": [
      "<Modal aria-modal='true' role='dialog' />"
    ],
    "synonyms": ["accessible modal"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl ˈmoʊdəl",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Trap focus, close on escape, and label modals.",
    "relatedConcepts": ["accessibility", "modal"]
  },
  {
    "word": "nextjs-accessible-tabs",
    "priority": 377,
    "definitions": [
      {
        "meaning": "A pattern for building accessible tab interfaces in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use ARIA roles and keyboard navigation for tabs."
      }
    ],
    "syntax": "<Tabs role='tablist'><Tab role='tab' /></Tabs>",
    "examples": [
      "<Tabs role='tablist'><Tab role='tab'>Tab 1</Tab></Tabs>"
    ],
    "synonyms": ["accessible tabs"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl tæbz",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Manage tab focus and selection with keyboard.",
    "relatedConcepts": ["accessibility", "tabs"]
  },
  {
    "word": "nextjs-accessible-accordion",
    "priority": 378,
    "definitions": [
      {
        "meaning": "A pattern for building accessible accordions in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use ARIA attributes for expand/collapse."
      }
    ],
    "syntax": "<Accordion aria-expanded={isOpen} />",
    "examples": [
      "<Accordion aria-expanded={open} />"
    ],
    "synonyms": ["accessible accordion"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl əˈkɔːrdiən",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Label panels and manage keyboard navigation.",
    "relatedConcepts": ["accessibility", "accordion"]
  },
  {
    "word": "nextjs-accessible-tooltip",
    "priority": 379,
    "definitions": [
      {
        "meaning": "A pattern for building accessible tooltips in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use aria-describedby and keyboard triggers."
      }
    ],
    "syntax": "<Tooltip aria-describedby='tip1' />",
    "examples": [
      "<Tooltip aria-describedby='desc' />"
    ],
    "synonyms": ["accessible tooltip"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl ˈtuːltɪp",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Show tooltips on focus and hover.",
    "relatedConcepts": ["accessibility", "tooltip"]
  },
  {
    "word": "nextjs-accessible-dropdown",
    "priority": 380,
    "definitions": [
      {
        "meaning": "A pattern for building accessible dropdowns in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use ARIA roles and keyboard navigation for dropdowns."
      }
    ],
    "syntax": "<Dropdown role='listbox' />",
    "examples": [
      "<Dropdown role='listbox' />"
    ],
    "synonyms": ["accessible dropdown"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl ˈdrɒpdaʊn",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Announce dropdown state changes for screen readers.",
    "relatedConcepts": ["accessibility", "dropdown"]
  },
  {
    "word": "nextjs-accessible-breadcrumbs",
    "priority": 381,
    "definitions": [
      {
        "meaning": "A pattern for building accessible breadcrumbs in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use nav, aria-label, and list markup for breadcrumbs."
      }
    ],
    "syntax": "<nav aria-label='Breadcrumb'><ol>...</ol></nav>",
    "examples": [
      "<nav aria-label='Breadcrumb'><ol><li>Home</li></ol></nav>"
    ],
    "synonyms": ["accessible breadcrumbs"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl ˈbrɛdkrʌmz",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use ordered lists and clear labels.",
    "relatedConcepts": ["accessibility", "breadcrumbs"]
  },
  {
    "word": "nextjs-accessible-pagination",
    "priority": 382,
    "definitions": [
      {
        "meaning": "A pattern for building accessible pagination in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use nav, aria-label, and button roles for pagination."
      }
    ],
    "syntax": "<nav aria-label='Pagination'><ul>...</ul></nav>",
    "examples": [
      "<nav aria-label='Pagination'><ul><li><button>1</button></li></ul></nav>"
    ],
    "synonyms": ["accessible pagination"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl ˌpeɪdʒɪˈneɪʃən",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use buttons for page links and announce changes.",
    "relatedConcepts": ["accessibility", "pagination"]
  },
  {
    "word": "nextjs-accessible-table",
    "priority": 383,
    "definitions": [
      {
        "meaning": "A pattern for building accessible tables in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use semantic table markup and ARIA attributes."
      }
    ],
    "syntax": "<table><thead><tr><th>Header</th></tr></thead></table>",
    "examples": [
      "<table aria-label='Data Table'><thead><tr><th>Name</th></tr></thead></table>"
    ],
    "synonyms": ["accessible table"],
    "antonyms": [],
    "frequency": 5,
    "pronunciation": "əkˈsɛsəbəl ˈteɪbəl",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use th for headers and scope attributes.",
    "relatedConcepts": ["accessibility", "table"]
  },
  {
    "word": "nextjs-accessible-chart",
    "priority": 384,
    "definitions": [
      {
        "meaning": "A pattern for building accessible charts in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Add ARIA labels and data tables for charts."
      }
    ],
    "syntax": "<Chart aria-label='Sales Chart' />",
    "examples": [
      "<Chart aria-label='Sales Chart' />"
    ],
    "synonyms": ["accessible chart"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əkˈsɛsəbəl tʃɑːrt",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Provide text alternatives for all data visualizations.",
    "relatedConcepts": ["accessibility", "chart"]
  },
  {
    "word": "nextjs-accessible-progress-bar",
    "priority": 385,
    "definitions": [
      {
        "meaning": "A pattern for building accessible progress bars in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use role='progressbar' and ARIA attributes."
      }
    ],
    "syntax": "<div role='progressbar' aria-valuenow={value} aria-valuemin={0} aria-valuemax={100} />",
    "examples": [
      "<div role='progressbar' aria-valuenow={50} aria-valuemin={0} aria-valuemax={100} />"
    ],
    "synonyms": ["accessible progress bar"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əkˈsɛsəbəl ˈprəʊɡrɛs bɑːr",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Announce progress changes for screen readers.",
    "relatedConcepts": ["accessibility", "progress bar"]
  },
  {
    "word": "nextjs-accessible-spinner",
    "priority": 386,
    "definitions": [
      {
        "meaning": "A pattern for building accessible spinners in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use aria-busy and visually hidden text."
      }
    ],
    "syntax": "<div aria-busy='true' aria-live='polite'>Loading...</div>",
    "examples": [
      "<div aria-busy='true' aria-live='polite'>Loading...</div>"
    ],
    "synonyms": ["accessible spinner"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əkˈsɛsəbəl ˈspɪnər",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Announce loading state for screen readers.",
    "relatedConcepts": ["accessibility", "spinner"]
  },
  {
    "word": "nextjs-accessible-alert",
    "priority": 387,
    "definitions": [
      {
        "meaning": "A pattern for building accessible alerts in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use role='alert' for important messages."
      }
    ],
    "syntax": "<div role='alert'>Error occurred!</div>",
    "examples": [
      "<div role='alert'>Error occurred!</div>"
    ],
    "synonyms": ["accessible alert"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əkˈsɛsəbəl əˈlɜːrt",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Announce alerts immediately for screen readers.",
    "relatedConcepts": ["accessibility", "alert"]
  },
  {
    "word": "nextjs-accessible-snackbar",
    "priority": 388,
    "definitions": [
      {
        "meaning": "A pattern for building accessible snackbars in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use aria-live for snackbars."
      }
    ],
    "syntax": "<div role='status' aria-live='polite'>Message</div>",
    "examples": [
      "<div role='status' aria-live='polite'>Saved!</div>"
    ],
    "synonyms": ["accessible snackbar"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əkˈsɛsəbəl ˈsnækˌbɑːr",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Announce snackbar messages for assistive tech.",
    "relatedConcepts": ["accessibility", "snackbar"]
  },
  {
    "word": "nextjs-accessible-toast",
    "priority": 389,
    "definitions": [
      {
        "meaning": "A pattern for building accessible toast notifications in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use aria-live and role='status' for toasts."
      }
    ],
    "syntax": "<div role='status' aria-live='polite'>Notification</div>",
    "examples": [
      "<div role='status' aria-live='polite'>Saved!</div>"
    ],
    "synonyms": ["accessible toast"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əkˈsɛsəbəl toʊst",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Announce toast messages for screen readers.",
    "relatedConcepts": ["accessibility", "toast"]
  },
  {
    "word": "nextjs-accessible-progressive-disclosure",
    "priority": 390,
    "definitions": [
      {
        "meaning": "A pattern for building accessible progressive disclosure (show/hide) in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Use ARIA attributes for show/hide content."
      }
    ],
    "syntax": "<button aria-expanded={open} aria-controls='details'>Show Details</button><div id='details'>...</div>",
    "examples": [
      "<button aria-expanded={open} aria-controls='details'>Show Details</button><div id='details'>Details here</div>"
    ],
    "synonyms": ["accessible show/hide"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "prəˈɡrɛsɪv dɪsˈkləʊʒər",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Announce expanded/collapsed state for screen readers.",
    "relatedConcepts": ["accessibility", "ui"]
  },
  {
    "word": "nextjs-accessible-live-region",
    "priority": 391,
    "definitions": [
      {
        "meaning": "A pattern for live regions that update dynamically for screen readers.",
        "partOfSpeech": "pattern",
        "example": "Use aria-live for dynamic updates."
      }
    ],
    "syntax": "<div aria-live='polite'>Update coming...</div>",
    "examples": [
      "<div aria-live='polite'>New message received</div>"
    ],
    "synonyms": ["live region"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "laɪv ˈriːdʒən",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use live regions for dynamic content updates.",
    "relatedConcepts": ["accessibility", "ui"]
  },
  {
    "word": "nextjs-accessible-announcement",
    "priority": 392,
    "definitions": [
      {
        "meaning": "A pattern for making announcements to screen readers in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Announce navigation or state changes."
      }
    ],
    "syntax": "<div aria-live='assertive'>Page loaded</div>",
    "examples": [
      "<div aria-live='assertive'>Form submitted</div>"
    ],
    "synonyms": ["announcement"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "əˈnaʊnsmənt",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use assertive for urgent, polite for less urgent updates.",
    "relatedConcepts": ["accessibility", "live region"]
  },
  {
    "word": "nextjs-accessible-focus-management",
    "priority": 393,
    "definitions": [
      {
        "meaning": "A pattern for managing keyboard focus for accessibility in React/Next.js.",
        "partOfSpeech": "pattern",
        "example": "Move focus to modals or alerts when they appear."
      }
    ],
    "syntax": "element.focus()",
    "examples": [
      "modalRef.current.focus()"
    ],
    "synonyms": ["focus management"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈfoʊkəs ˈmænɪdʒmənt",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Restore focus after closing overlays.",
    "relatedConcepts": ["accessibility", "ui"]
  },
  {
    "word": "nextjs-accessible-skip-link",
    "priority": 394,
    "definitions": [
      {
        "meaning": "A pattern for skip navigation links for screen readers and keyboard users.",
        "partOfSpeech": "pattern",
        "example": "Provide a skip to content link at the top."
      }
    ],
    "syntax": "<a href='#main-content' className='skip-link'>Skip to content</a>",
    "examples": [
      "<a href='#main-content' className='skip-link'>Skip to content</a>"
    ],
    "synonyms": ["skip link"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "skɪp lɪŋk",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Make skip links visible on focus.",
    "relatedConcepts": ["accessibility", "navigation"]
  },
  {
    "word": "nextjs-accessible-landmark",
    "priority": 395,
    "definitions": [
      {
        "meaning": "A pattern for using ARIA landmark roles for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Use main, nav, and aside for landmarks."
      }
    ],
    "syntax": "<main role='main'>{children}</main>",
    "examples": [
      "<nav role='navigation'>{...}</nav>"
    ],
    "synonyms": ["landmark"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈlændˌmɑːrk",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Use landmarks for page structure and navigation.",
    "relatedConcepts": ["accessibility", "ui"]
  },
  {
    "word": "nextjs-accessible-heading-structure",
    "priority": 396,
    "definitions": [
      {
        "meaning": "A pattern for using semantic heading levels for accessibility.",
        "partOfSpeech": "pattern",
        "example": "Use h1-h6 in order for page sections."
      }
    ],
    "syntax": "<h1>Main Title</h1><h2>Section</h2>",
    "examples": [
      "<h1>Page Title</h1><h2>Subsection</h2>"
    ],
    "synonyms": ["heading structure"],
    "antonyms": [],
    "frequency": 2,
    "pronunciation": "ˈhɛdɪŋ ˈstrʌktʃər",
    "difficulty": "intermediate",
    "category": "accessibility",
    "bestPractice": "Never skip heading levels.",
    "relatedConcepts": ["accessibility", "semantic html"]
  }
]
