[
  {
    "word": "middleware",
    "priority": 37,
    "definitions": [
      {
        "meaning": "Code that runs before a request is completed, often for authentication or redirects.",
        "partOfSpeech": "noun",
        "example": "Use middleware for route protection."
      }
    ],
    "syntax": "export function middleware(request) { /* logic */ }",
    "examples": [
      "export function middleware(request) {\n  if (!request.cookies.token) {\n    return Response.redirect('/login');\n  }\n  return NextResponse.next();\n}"
    ],
    "synonyms": ["interceptor", "handler"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈmɪdəlˌwɛər",
    "difficulty": "intermediate",
    "category": "routing",
    "bestPractice": "Use middleware for authentication, logging, or redirects in Next.js.",
    "relatedConcepts": ["custom server", "route", "API route"]
  },
  {
    "word": "static props",
    "priority": 38,
    "definitions": [
      {
        "meaning": "Data fetched at build time for static pages.",
        "partOfSpeech": "noun",
        "example": "getStaticProps returns static props."
      }
    ],
    "syntax": "export async function getStaticProps() { return { props: { ... } }; }",
    "examples": [
      "export async function getStaticProps() {\n  const posts = await getPosts();\n  return { props: { posts } };\n}"
    ],
    "synonyms": ["build data"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈstætɪk prɒps",
    "difficulty": "intermediate",
    "category": "data fetching",
    "bestPractice": "Use static props for content that changes rarely.",
    "relatedConcepts": ["SSG", "getStaticProps"]
  },
  {
    "word": "fallback",
    "priority": 39,
    "definitions": [
      {
        "meaning": "A Next.js feature for handling not-yet-generated static pages.",
        "partOfSpeech": "noun",
        "example": "Set fallback: true for dynamic SSG routes."
      }
    ],
    "syntax": "getStaticPaths({ fallback: true })",
    "examples": [
      "export async function getStaticPaths() {\n  return { paths: [], fallback: true };\n}"
    ],
    "synonyms": ["default", "backup"],
    "antonyms": [],
    "frequency": 70,
    "etymology": "",
    "pronunciation": "ˈfɔːlbæk",
    "difficulty": "intermediate",
    "category": "data fetching",
    "bestPractice": "Use fallback for large dynamic sites with many pages.",
    "relatedConcepts": ["getStaticPaths", "SSG"]
  },
  {
    "word": "redirect",
    "priority": 40,
    "definitions": [
      {
        "meaning": "To send users from one route to another.",
        "partOfSpeech": "verb",
        "example": "Use Next.js redirects for legacy URLs."
      }
    ],
    "syntax": "return { redirect: { destination: '/login', permanent: false } }",
    "examples": [
      "export async function getServerSideProps() {\n  return { redirect: { destination: '/login', permanent: false } };\n}"
    ],
    "synonyms": ["forward", "reroute"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˌriːdɪˈrɛkt",
    "difficulty": "intermediate",
    "category": "routing",
    "bestPractice": "Use redirects for authentication and legacy support.",
    "relatedConcepts": ["middleware", "route"]
  },
  {
    "word": "environment variable",
    "priority": 41,
    "definitions": [
      {
        "meaning": "A variable set outside of code, used for configuration.",
        "partOfSpeech": "noun",
        "example": "NEXT_PUBLIC_API_URL is an environment variable."
      }
    ],
    "syntax": "process.env.NEXT_PUBLIC_API_URL",
    "examples": [
      "const apiUrl = process.env.NEXT_PUBLIC_API_URL;"
    ],
    "synonyms": ["env var", "config variable"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ɪnˈvaɪrənmənt ˈvɛriəbl",
    "difficulty": "intermediate",
    "category": "configuration",
    "bestPractice": "Prefix public variables with NEXT_PUBLIC_ for client-side access.",
    "relatedConcepts": ["configuration", "deployment"]
  },
  {
    "word": "deployment",
    "priority": 42,
    "definitions": [
      {
        "meaning": "Publishing an app to a server or cloud platform.",
        "partOfSpeech": "noun",
        "example": "Deploy your Next.js app to Vercel."
      }
    ],
    "syntax": "vercel --prod",
    "examples": [
      "vercel --prod",
      "npm run build && npm run start"
    ],
    "synonyms": ["publish", "release"],
    "antonyms": [],
    "frequency": 90,
    "etymology": "",
    "pronunciation": "dɪˈplɔɪmənt",
    "difficulty": "basic",
    "category": "deployment",
    "bestPractice": "Automate deployments with CI/CD pipelines.",
    "relatedConcepts": ["Vercel", "CI/CD"]
  },
  {
    "word": "hot reloading",
    "priority": 43,
    "definitions": [
      {
        "meaning": "Automatically updating the app in the browser as code changes.",
        "partOfSpeech": "noun",
        "example": "Hot reloading speeds up development."
      }
    ],
    "syntax": "npm run dev",
    "examples": [
      "npm run dev // enables hot reloading"
    ],
    "synonyms": ["live reload"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "hɒt rɪˈloʊdɪŋ",
    "difficulty": "intermediate",
    "category": "development",
    "bestPractice": "Use hot reloading for rapid development feedback.",
    "relatedConcepts": ["development", "refresh"]
  },
  {
    "word": "custom document",
    "priority": 44,
    "definitions": [
      {
        "meaning": "A file (_document.js) for customizing the HTML document structure.",
        "partOfSpeech": "noun",
        "example": "Use custom document to add lang attribute."
      }
    ],
    "syntax": "export default class MyDocument extends Document { ... }",
    "examples": [
      "import Document, { Html, Head, Main, NextScript } from 'next/document';\nexport default class MyDocument extends Document {\n  render() {\n    return (\n      <Html lang='en'>\n        <Head />\n        <body>\n          <Main />\n          <NextScript />\n        </body>\n      </Html>\n    );\n  }\n}"
    ],
    "synonyms": ["_document.js", "HTML structure"],
    "antonyms": [],
    "frequency": 70,
    "etymology": "",
    "pronunciation": "ˈkʌstəm ˈdɒkjumənt",
    "difficulty": "advanced",
    "category": "structure",
    "bestPractice": "Only use custom document for advanced HTML customization.",
    "relatedConcepts": ["custom app", "Head"]
  },
  {
    "word": "custom app",
    "priority": 45,
    "definitions": [
      {
        "meaning": "A file (_app.js) for customizing the root component of all pages.",
        "partOfSpeech": "noun",
        "example": "Use custom app to add global styles."
      }
    ],
    "syntax": "export default function MyApp({ Component, pageProps }) { return <Component {...pageProps} />; }",
    "examples": [
      "import '../styles/globals.css';\nexport default function MyApp({ Component, pageProps }) { return <Component {...pageProps} />; }"
    ],
    "synonyms": ["_app.js", "root component"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈkʌstəm æp",
    "difficulty": "advanced",
    "category": "structure",
    "bestPractice": "Use custom app for providers, global CSS, and layout.",
    "relatedConcepts": ["custom document", "layout"]
  },
  {
    "word": "public directory",
    "priority": 46,
    "definitions": [
      {
        "meaning": "A folder in Next.js for static assets served at the root.",
        "partOfSpeech": "noun",
        "example": "Place favicon.ico in the public directory."
      }
    ],
    "syntax": "/public/filename",
    "examples": [
      "/public/logo.png // accessible at /logo.png"
    ],
    "synonyms": ["public folder", "static assets"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈpʌblɪk dəˈrɛktəri",
    "difficulty": "basic",
    "category": "structure",
    "bestPractice": "Use the public directory for static files only.",
    "relatedConcepts": ["static", "media"]
  },
  {
    "word": "static file serving",
    "priority": 47,
    "definitions": [
      {
        "meaning": "Serving static files from the public directory.",
        "partOfSpeech": "noun",
        "example": "Access /public/image.png at /image.png."
      }
    ],
    "syntax": "<img src='/filename.png' />",
    "examples": [
      "<img src='/logo.png' />"
    ],
    "synonyms": ["static assets", "file serving"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈstætɪk faɪl ˈsɜːrvɪŋ",
    "difficulty": "basic",
    "category": "media",
    "bestPractice": "Reference static files with root-relative paths.",
    "relatedConcepts": ["public directory", "media"]
  },
  {
    "word": "API handler",
    "priority": 48,
    "definitions": [
      {
        "meaning": "A function that handles HTTP requests in a Next.js API route.",
        "partOfSpeech": "noun",
        "example": "export default function handler(req, res) { ... }"
      }
    ],
    "syntax": "export default function handler(req, res) { ... }",
    "examples": [
      "export default function handler(req, res) { res.status(200).json({ name: 'John' }) }"
    ],
    "synonyms": ["api function"],
    "antonyms": [],
    "frequency": 90,
    "etymology": "",
    "pronunciation": "eɪ-piː-aɪ ˈhændlər",
    "difficulty": "intermediate",
    "category": "api",
    "bestPractice": "Keep API handlers stateless and lightweight.",
    "relatedConcepts": ["API route", "serverless"]
  },
  {
    "word": "catch-all route",
    "priority": 49,
    "definitions": [
      {
        "meaning": "A dynamic route that matches all paths using [...param].js.",
        "partOfSpeech": "noun",
        "example": "pages/docs/[...slug].js is a catch-all route."
      }
    ],
    "syntax": "pages/docs/[...slug].js",
    "examples": [
      "pages/blog/[...slug].js"
    ],
    "synonyms": ["wildcard route"],
    "antonyms": [],
    "frequency": 70,
    "etymology": "",
    "pronunciation": "kætʃ ɔːl raʊt",
    "difficulty": "intermediate",
    "category": "routing",
    "bestPractice": "Use catch-all routes for deeply nested content.",
    "relatedConcepts": ["dynamic route", "route"]
  },
  {
    "word": "optional catch-all route",
    "priority": 50,
    "definitions": [
      {
        "meaning": "A catch-all route that matches zero or more segments using [[...param]].js.",
        "partOfSpeech": "noun",
        "example": "pages/docs/[[...slug]].js matches /docs and /docs/a/b."
      }
    ],
    "syntax": "pages/docs/[[...slug]].js",
    "examples": [
      "pages/docs/[[...slug]].js"
    ],
    "synonyms": ["optional wildcard route"],
    "antonyms": [],
    "frequency": 60,
    "etymology": "",
    "pronunciation": "ˈɒpʃənl kætʃ ɔːl raʊt",
    "difficulty": "advanced",
    "category": "routing",
    "bestPractice": "Use optional catch-all for flexible nested routes.",
    "relatedConcepts": ["catch-all route", "dynamic route"]
  },
  {
    "word": "error page",
    "priority": 51,
    "definitions": [
      {
        "meaning": "A custom page for handling errors, e.g., 404.js or 500.js.",
        "partOfSpeech": "noun",
        "example": "pages/404.js is the custom 404 error page."
      }
    ],
    "syntax": "export default function Custom404() { return <h1>404 - Page Not Found</h1>; }",
    "examples": [
      "export default function Custom404() { return <h1>404 - Page Not Found</h1>; }"
    ],
    "synonyms": ["404 page", "500 page"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈɛrər peɪdʒ",
    "difficulty": "basic",
    "category": "structure",
    "bestPractice": "Always provide a user-friendly error page.",
    "relatedConcepts": ["custom app", "routing"]
  },
  {
    "word": "custom 404",
    "priority": 52,
    "definitions": [
      {
        "meaning": "A user-defined page shown for not found errors.",
        "partOfSpeech": "noun",
        "example": "pages/404.js displays when a route is not found."
      }
    ],
    "syntax": "export default function Custom404() { return <h1>404 - Not Found</h1>; }",
    "examples": [
      "export default function Custom404() { return <h1>404 - Not Found</h1>; }"
    ],
    "synonyms": ["not found page"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈkʌstəm fɔːr oʊ fɔːr",
    "difficulty": "basic",
    "category": "structure",
    "bestPractice": "Customize the 404 page for better UX.",
    "relatedConcepts": ["error page", "routing"]
  },
  {
    "word": "custom 500",
    "priority": 53,
    "definitions": [
      {
        "meaning": "A user-defined page shown for server errors.",
        "partOfSpeech": "noun",
        "example": "pages/500.js displays when a server error occurs."
      }
    ],
    "syntax": "export default function Custom500() { return <h1>500 - Server Error</h1>; }",
    "examples": [
      "export default function Custom500() { return <h1>500 - Server Error</h1>; }"
    ],
    "synonyms": ["server error page"],
    "antonyms": [],
    "frequency": 70,
    "etymology": "",
    "pronunciation": "ˈkʌstəm faɪv hʌndrəd",
    "difficulty": "basic",
    "category": "structure",
    "bestPractice": "Provide a friendly message for server errors.",
    "relatedConcepts": ["error page", "routing"]
  },
  {
    "word": "document head",
    "priority": 54,
    "definitions": [
      {
        "meaning": "The <head> section of the HTML document, managed with the Head component.",
        "partOfSpeech": "noun",
        "example": "Set meta tags using <Head> in Next.js."
      }
    ],
    "syntax": "<Head>...</Head>",
    "examples": [
      "<Head><meta name='description' content='My app' /></Head>"
    ],
    "synonyms": ["meta", "head"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈdɒkjumənt hɛd",
    "difficulty": "basic",
    "category": "meta",
    "bestPractice": "Use Head for SEO and social sharing tags.",
    "relatedConcepts": ["Head", "SEO"]
  },
  {
    "word": "meta tags",
    "priority": 55,
    "definitions": [
      {
        "meaning": "HTML tags in the document head for SEO and metadata.",
        "partOfSpeech": "noun",
        "example": "<meta name='description' content='My app' />"
      }
    ],
    "syntax": "<meta name='description' content='...' />",
    "examples": [
      "<meta name='viewport' content='width=device-width, initial-scale=1' />"
    ],
    "synonyms": ["metadata"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈmɛtə tæɡz",
    "difficulty": "basic",
    "category": "meta",
    "bestPractice": "Set meta tags for SEO and accessibility.",
    "relatedConcepts": ["document head", "SEO"]
  },
  {
    "word": "SEO",
    "priority": 56,
    "definitions": [
      {
        "meaning": "Search Engine Optimization, improving site visibility in search engines.",
        "partOfSpeech": "noun",
        "example": "Use meta tags and SSR for better SEO."
      }
    ],
    "syntax": "<Head><title>My Page</title></Head>",
    "examples": [
      "<Head><title>My Page</title></Head>"
    ],
    "synonyms": ["search optimization"],
    "antonyms": [],
    "frequency": 90,
    "etymology": "Acronym for Search Engine Optimization.",
    "pronunciation": "ɛs iː oʊ",
    "difficulty": "intermediate",
    "category": "meta",
    "bestPractice": "Use SSR and proper meta tags for SEO.",
    "relatedConcepts": ["meta tags", "Head"]
  },
  {
    "word": "Vercel",
    "priority": 57,
    "definitions": [
      {
        "meaning": "A cloud platform for hosting Next.js apps.",
        "partOfSpeech": "noun",
        "example": "Deploy your Next.js app to Vercel."
      }
    ],
    "syntax": "vercel --prod",
    "examples": [
      "vercel --prod"
    ],
    "synonyms": ["hosting", "cloud"],
    "antonyms": [],
    "frequency": 90,
    "etymology": "",
    "pronunciation": "vərˈsɛl",
    "difficulty": "basic",
    "category": "deployment",
    "bestPractice": "Use Vercel for seamless Next.js deployment.",
    "relatedConcepts": ["deployment", "CI/CD"]
  },
  {
    "word": "CI/CD",
    "priority": 58,
    "definitions": [
      {
        "meaning": "Continuous Integration and Continuous Deployment for automated testing and deployment.",
        "partOfSpeech": "noun",
        "example": "Set up CI/CD pipelines on GitHub."
      }
    ],
    "syntax": ".github/workflows/deploy.yml",
    "examples": [
      "name: Deploy\non: push\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2"
    ],
    "synonyms": ["automation", "pipeline"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "siː aɪ siː diː",
    "difficulty": "intermediate",
    "category": "deployment",
    "bestPractice": "Automate tests and deployments with CI/CD.",
    "relatedConcepts": ["deployment", "GitHub Actions"]
  },
  {
    "word": "GitHub Actions",
    "priority": 59,
    "definitions": [
      {
        "meaning": "Automated workflows for building, testing, and deploying code on GitHub.",
        "partOfSpeech": "tool",
        "example": "Use GitHub Actions for CI/CD."
      }
    ],
    "syntax": "name: Deploy\nojobs:\n  build:\n    steps:\n      - uses: actions/checkout@v2",
    "examples": [
      "name: Deploy\non: push\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2"
    ],
    "synonyms": ["automation", "workflow"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈɡɪthʌb ˈækʃənz",
    "difficulty": "intermediate",
    "category": "deployment",
    "bestPractice": "Use GitHub Actions for automated testing and deployment.",
    "relatedConcepts": ["CI/CD", "deployment"]
  },
  {
    "word": "serverless",
    "priority": 60,
    "definitions": [
      {
        "meaning": "A cloud computing model where the provider manages server infrastructure.",
        "partOfSpeech": "adjective",
        "example": "Next.js API routes run as serverless functions."
      }
    ],
    "syntax": "export default function handler(req, res) { ... }",
    "examples": [
      "export default function handler(req, res) { res.json({ ok: true }); }"
    ],
    "synonyms": ["cloud function"],
    "antonyms": ["serverful"],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "ˈsɜːrvərləs",
    "difficulty": "intermediate",
    "category": "deployment",
    "bestPractice": "Use serverless functions for lightweight APIs.",
    "relatedConcepts": ["API route", "deployment"]
  },
  {
    "word": "custom middleware",
    "priority": 61,
    "definitions": [
      {
        "meaning": "User-defined middleware logic for requests.",
        "partOfSpeech": "noun",
        "example": "Custom middleware can check authentication or logging."
      }
    ],
    "syntax": "export function middleware(req) { /* logic */ }",
    "examples": [
      "export function middleware(req) { if (!req.cookies.token) return Response.redirect('/login'); }"
    ],
    "synonyms": ["custom handler"],
    "antonyms": [],
    "frequency": 60,
    "etymology": "",
    "pronunciation": "ˈkʌstəm ˈmɪdəlˌwɛər",
    "difficulty": "intermediate",
    "category": "routing",
    "bestPractice": "Keep custom middleware simple and fast.",
    "relatedConcepts": ["middleware", "route"]
  },
  {
    "word": "static export",
    "priority": 62,
    "definitions": [
      {
        "meaning": "Exporting a Next.js site as static HTML.",
        "partOfSpeech": "noun",
        "example": "Use next export to generate static files."
      }
    ],
    "syntax": "next export",
    "examples": [
      "next build && next export"
    ],
    "synonyms": ["static generation"],
    "antonyms": [],
    "frequency": 60,
    "etymology": "",
    "pronunciation": "ˈstætɪk ˈɛkspɔːrt",
    "difficulty": "intermediate",
    "category": "deployment",
    "bestPractice": "Use static export for sites that don’t need SSR or API routes.",
    "relatedConcepts": ["SSG", "deployment"]
  },
  {
    "word": "incremental adoption",
    "priority": 63,
    "definitions": [
      {
        "meaning": "Adopting Next.js features gradually in an existing React app.",
        "partOfSpeech": "noun",
        "example": "Add Next.js pages to a React app for incremental adoption."
      }
    ],
    "syntax": "// Add pages/ directory to start using Next.js",
    "examples": [
      "// Add pages/index.js to convert a React app to Next.js"
    ],
    "synonyms": ["gradual migration"],
    "antonyms": [],
    "frequency": 50,
    "etymology": "",
    "pronunciation": "ɪnkrɪˈmɛntəl əˈdɒpʃən",
    "difficulty": "intermediate",
    "category": "migration",
    "bestPractice": "Adopt Next.js features one at a time to reduce risk.",
    "relatedConcepts": ["migration", "React"]
  },
  {
    "word": "next.config.js",
    "priority": 64,
    "definitions": [
      {
        "meaning": "A configuration file for customizing Next.js behavior.",
        "partOfSpeech": "noun",
        "example": "Set up redirects in next.config.js."
      }
    ],
    "syntax": "module.exports = { ... }",
    "examples": [
      "module.exports = { reactStrictMode: true }"
    ],
    "synonyms": ["config file"],
    "antonyms": [],
    "frequency": 90,
    "etymology": "",
    "pronunciation": "nɛkst kənˈfɪɡ dʒeɪ ɛs",
    "difficulty": "intermediate",
    "category": "configuration",
    "bestPractice": "Document all changes in next.config.js for team clarity.",
    "relatedConcepts": ["configuration", "deployment"]
  },
  {
    "word": "custom babel config",
    "priority": 65,
    "definitions": [
      {
        "meaning": "A .babelrc or babel.config.js file for customizing JavaScript transpilation.",
        "partOfSpeech": "noun",
        "example": "Use custom Babel config for advanced JavaScript features."
      }
    ],
    "syntax": "{ \"presets\": [\"next/babel\"] }",
    "examples": [
      "{ \"presets\": [\"next/babel\"] }"
    ],
    "synonyms": ["babelrc", "babel config"],
    "antonyms": [],
    "frequency": 60,
    "etymology": "",
    "pronunciation": "ˈbeɪbəl kənˈfɪɡ",
    "difficulty": "advanced",
    "category": "configuration",
    "bestPractice": "Use custom Babel config only if you need advanced features.",
    "relatedConcepts": ["next.config.js", "configuration"]
  },
  {
    "word": "custom webpack config",
    "priority": 66,
    "definitions": [
      {
        "meaning": "A function in next.config.js to customize webpack behavior.",
        "partOfSpeech": "noun",
        "example": "Add custom loaders in webpack config."
      }
    ],
    "syntax": "module.exports = { webpack: (config) => { ...; return config; } }",
    "examples": [
      "module.exports = { webpack: (config) => { config.plugins.push(new MyPlugin()); return config; } }"
    ],
    "synonyms": ["webpack customization"],
    "antonyms": [],
    "frequency": 60,
    "etymology": "",
    "pronunciation": "ˈwɛbˌpæk kənˈfɪɡ",
    "difficulty": "advanced",
    "category": "configuration",
    "bestPractice": "Document custom webpack changes for maintainability.",
    "relatedConcepts": ["next.config.js", "configuration"]
  },
  {
    "word": "polyfill",
    "priority": 67,
    "definitions": [
      {
        "meaning": "A piece of code used to provide modern functionality on older browsers.",
        "partOfSpeech": "noun",
        "example": "Add a polyfill for fetch in Next.js."
      }
    ],
    "syntax": "import 'whatwg-fetch';",
    "examples": [
      "import 'core-js/stable';\nimport 'regenerator-runtime/runtime';"
    ],
    "synonyms": ["shim"],
    "antonyms": [],
    "frequency": 60,
    "etymology": "",
    "pronunciation": "ˈpɒlɪfɪl",
    "difficulty": "advanced",
    "category": "compatibility",
    "bestPractice": "Only add polyfills for features you actually use.",
    "relatedConcepts": ["compatibility", "babel"]
  },
  {
    "word": "custom error handling",
    "priority": 68,
    "definitions": [
      {
        "meaning": "User-defined logic for handling errors in Next.js.",
        "partOfSpeech": "noun",
        "example": "Use custom error handling for API routes."
      }
    ],
    "syntax": "try { ... } catch (error) { ... }",
    "examples": [
      "export default function handler(req, res) {\n  try {\n    // ...\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n}"
    ],
    "synonyms": ["error handler"],
    "antonyms": [],
    "frequency": 70,
    "etymology": "",
    "pronunciation": "ˈkʌstəm ˈɛrər ˈhændlɪŋ",
    "difficulty": "intermediate",
    "category": "error handling",
    "bestPractice": "Return meaningful error messages to the client.",
    "relatedConcepts": ["error page", "custom 500"]
  },
  {
    "word": "static props revalidation",
    "priority": 69,
    "definitions": [
      {
        "meaning": "Revalidating static props at a set interval using ISR.",
        "partOfSpeech": "noun",
        "example": "Set revalidate in getStaticProps for ISR."
      }
    ],
    "syntax": "export async function getStaticProps() { return { props: { ... }, revalidate: 10 } }",
    "examples": [
      "export async function getStaticProps() { return { props: { posts }, revalidate: 60 }; }"
    ],
    "synonyms": ["ISR"],
    "antonyms": [],
    "frequency": 70,
    "etymology": "",
    "pronunciation": "stætɪk prɒps ˌriːˌvælɪˈdeɪʃən",
    "difficulty": "intermediate",
    "category": "data fetching",
    "bestPractice": "Set a revalidate interval that matches your content update frequency.",
    "relatedConcepts": ["ISR", "getStaticProps"]
  },
  {
    "word": "absolute imports",
    "priority": 70,
    "definitions": [
      {
        "meaning": "Importing modules using absolute paths in Next.js.",
        "partOfSpeech": "noun",
        "example": "Use jsconfig.json for absolute imports."
      }
    ],
    "syntax": "import Button from 'components/Button';",
    "examples": [
      "import Header from 'components/Header';"
    ],
    "synonyms": ["absolute path import"],
    "antonyms": [],
    "frequency": 60,
    "etymology": "",
    "pronunciation": "ˈæbsəluːt ˈɪmpɔːrts",
    "difficulty": "intermediate",
    "category": "configuration",
    "bestPractice": "Use absolute imports for cleaner and more maintainable code.",
    "relatedConcepts": ["jsconfig.json", "import"]
  },
  {
    "word": "jsconfig.json",
    "priority": 71,
    "definitions": [
      {
        "meaning": "A configuration file for JavaScript projects to support absolute imports.",
        "partOfSpeech": "noun",
        "example": "Configure baseUrl in jsconfig.json."
      }
    ],
    "syntax": "{ \"compilerOptions\": { \"baseUrl\": \".\" } }",
    "examples": [
      "{ \"compilerOptions\": { \"baseUrl\": \".\" } }"
    ],
    "synonyms": ["config file"],
    "antonyms": [],
    "frequency": 60,
    "etymology": "",
    "pronunciation": "dʒeɪ ɛs kənˈfɪɡ dʒeɪ ɛs ən",
    "difficulty": "intermediate",
    "category": "configuration",
    "bestPractice": "Use jsconfig.json for absolute imports in JavaScript projects.",
    "relatedConcepts": ["absolute imports", "import"]
  },
  {
    "word": "tsconfig.json",
    "priority": 72,
    "definitions": [
      {
        "meaning": "A configuration file for TypeScript projects.",
        "partOfSpeech": "noun",
        "example": "Set compiler options in tsconfig.json."
      }
    ],
    "syntax": "{ \"compilerOptions\": { \"strict\": true } }",
    "examples": [
      "{ \"compilerOptions\": { \"strict\": true, \"baseUrl\": \".\" } }"
    ],
    "synonyms": ["config file"],
    "antonyms": [],
    "frequency": 80,
    "etymology": "",
    "pronunciation": "tiː ɛs kənˈfɪɡ dʒeɪ ɛs ən",
    "difficulty": "intermediate",
    "category": "configuration",
    "bestPractice": "Use tsconfig.json to enable strict type checking and absolute imports.",
    "relatedConcepts": ["TypeScript", "absolute imports"]
  }
]
