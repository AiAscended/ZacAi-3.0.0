{
  "words": [
    {
      "priority": 1,
      "word": "JSON",
      "part_of_speech": "noun",
      "definition": "A lightweight data-interchange format based on a subset of JavaScript syntax, used to represent structured data as text.",
      "example": "APIs commonly return data in JSON format.",
      "examples": ["JSON is easy for humans to read and write."],
      "frequency_rank": 1,
      "tags": ["data", "format"],
      "related": ["JavaScript", "object", "array"],
      "synonyms": ["JavaScript Object Notation"],
      "antonyms": [],
      "pronunciation": "ˈdʒeɪsɒn",
      "tts_text": "JSON",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Standard for web APIs and configs.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 2,
      "word": "object",
      "part_of_speech": "noun",
      "definition": "A collection of key-value pairs in JSON, enclosed in curly braces.",
      "example": "{\"name\": \"Alice\", \"age\": 30}",
      "examples": ["Objects represent structured data."],
      "frequency_rank": 2,
      "tags": ["JSON", "data"],
      "related": ["array", "property"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɒbdʒɛkt",
      "tts_text": "object",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Objects are the main structure in JSON.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 3,
      "word": "array",
      "part_of_speech": "noun",
      "definition": "An ordered list of values in JSON, enclosed in square brackets.",
      "example": "[1, 2, 3, 4]",
      "examples": ["Arrays store multiple values in order."],
      "frequency_rank": 3,
      "tags": ["JSON", "data"],
      "related": ["object", "element"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "əˈreɪ",
      "tts_text": "array",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Arrays can contain objects or other arrays.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 4,
      "word": "property",
      "part_of_speech": "noun",
      "definition": "A key-value pair in a JSON object.",
      "example": "\"username\": \"bob\"",
      "examples": ["Properties define the structure of objects."],
      "frequency_rank": 4,
      "tags": ["JSON", "data"],
      "related": ["object", "value"],
      "synonyms": ["field", "attribute"],
      "antonyms": [],
      "pronunciation": "ˈprɒpərti",
      "tts_text": "property",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Keys must be strings in JSON.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 5,
      "word": "value",
      "part_of_speech": "noun",
      "definition": "The data assigned to a property in a JSON object, can be a string, number, boolean, array, object, or null.",
      "example": "\"age\": 42",
      "examples": ["Values can be nested structures."],
      "frequency_rank": 5,
      "tags": ["JSON", "data"],
      "related": ["property", "object"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈvæljuː",
      "tts_text": "value",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "JSON supports six value types.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 6,
      "word": "string",
      "part_of_speech": "noun",
      "definition": "A sequence of Unicode characters enclosed in double quotes in JSON.",
      "example": "\"hello world\"",
      "examples": ["Strings are the only allowed key type."],
      "frequency_rank": 6,
      "tags": ["JSON", "data"],
      "related": ["value", "property"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "strɪŋ",
      "tts_text": "string",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Must use double quotes in JSON.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 7,
      "word": "number",
      "part_of_speech": "noun",
      "definition": "A numeric value in JSON, can be integer or floating-point.",
      "example": "3.14",
      "examples": ["Numbers are not quoted in JSON."],
      "frequency_rank": 7,
      "tags": ["JSON", "data"],
      "related": ["value", "property"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈnʌmbər",
      "tts_text": "number",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "No NaN or Infinity in JSON.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 8,
      "word": "boolean",
      "part_of_speech": "noun",
      "definition": "A logical value in JSON, either true or false.",
      "example": "\"active\": true",
      "examples": ["Booleans are not quoted in JSON."],
      "frequency_rank": 8,
      "tags": ["JSON", "data"],
      "related": ["value", "property"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈbuːliən",
      "tts_text": "boolean",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Only true or false are valid.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 9,
      "word": "null",
      "part_of_speech": "noun",
      "definition": "A special value in JSON representing no value or empty.",
      "example": "\"middleName\": null",
      "examples": ["Null is used for missing or empty data."],
      "frequency_rank": 9,
      "tags": ["JSON", "data"],
      "related": ["value", "property"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "nʌl",
      "tts_text": "null",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Null is different from undefined in JS.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 10,
      "word": "parse",
      "part_of_speech": "verb",
      "definition": "To convert a JSON string into a JavaScript object using JSON.parse().",
      "example": "const obj = JSON.parse(jsonString);",
      "examples": ["Parsing converts text to usable data."],
      "frequency_rank": 10,
      "tags": ["JSON", "JavaScript"],
      "related": ["stringify", "object"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "pɑːrs",
      "tts_text": "parse",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Throws error if JSON is invalid.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 11,
      "word": "stringify",
      "part_of_speech": "verb",
      "definition": "To convert a JavaScript object into a JSON string using JSON.stringify().",
      "example": "const json = JSON.stringify(obj);",
      "examples": ["Stringify serializes data for storage or transfer."],
      "frequency_rank": 11,
      "tags": ["JSON", "JavaScript"],
      "related": ["parse", "object"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈstrɪŋɡɪfaɪ",
      "tts_text": "stringify",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Optional arguments control formatting.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 12,
      "word": "schema",
      "part_of_speech": "noun",
      "definition": "A structured definition of data shape, types, and validation rules, often used with JSON or databases.",
      "example": "Define a schema to validate incoming JSON data.",
      "examples": ["TypeScript interfaces can act as schemas."],
      "frequency_rank": 12,
      "tags": ["JSON", "data"],
      "related": ["validation", "type"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈskiːmə",
      "tts_text": "schema",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "JSON Schema is a standard for validation.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 13,
      "word": "JSON Schema",
      "part_of_speech": "noun",
      "definition": "A vocabulary that allows you to annotate and validate JSON documents.",
      "example": "Use JSON Schema to enforce data structure.",
      "examples": ["JSON Schema is widely used in APIs."],
      "frequency_rank": 13,
      "tags": ["JSON", "validation"],
      "related": ["schema", "validation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈdʒeɪsɒn ˈskiːmə",
      "tts_text": "JSON Schema",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Supports type validation and documentation.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 14,
      "word": "validation",
      "part_of_speech": "noun",
      "definition": "The process of checking JSON data against a schema or set of rules.",
      "example": "Validation ensures only correct data is processed.",
      "examples": ["AJV is a popular JSON validator."],
      "frequency_rank": 14,
      "tags": ["JSON", "data"],
      "related": ["schema", "JSON Schema"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌvælɪˈdeɪʃən",
      "tts_text": "validation",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Critical for API security and reliability.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 15,
      "word": "comment",
      "part_of_speech": "noun",
      "definition": "A note in code for developers; not allowed in standard JSON but supported in JSON5 or some config tools.",
      "example": "// This is a comment",
      "examples": ["JSON does not support comments by default."],
      "frequency_rank": 15,
      "tags": ["JSON", "syntax"],
      "related": ["JSON5", "config"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈkɒmɛnt",
      "tts_text": "comment",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Use JSON5 for comments in config files.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 16,
      "word": "minify",
      "part_of_speech": "verb",
      "definition": "To remove whitespace and unnecessary characters from JSON to reduce size.",
      "example": "Minify JSON before sending over the network.",
      "examples": ["Minified JSON loads faster."],
      "frequency_rank": 16,
      "tags": ["JSON", "performance"],
      "related": ["stringify", "parse"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɪnɪfaɪ",
      "tts_text": "minify",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Whitespace is ignored by parsers.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 17,
      "word": "pretty-print",
      "part_of_speech": "verb",
      "definition": "To format JSON with indentation and line breaks for readability.",
      "example": "Pretty-print JSON for debugging.",
      "examples": ["Pretty-printed JSON is easier to review."],
      "frequency_rank": 17,
      "tags": ["JSON", "format"],
      "related": ["stringify", "minify"],
      "synonyms": ["format"],
      "antonyms": [],
      "pronunciation": "ˈprɪti prɪnt",
      "tts_text": "pretty-print",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "JSON.stringify supports pretty-printing.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 18,
      "word": "config file",
      "part_of_speech": "noun",
      "definition": "A file that stores configuration settings in JSON format, such as tsconfig.json or package.json.",
      "example": "Edit the config file to change build options.",
      "examples": ["Tailwind, TypeScript, and Next.js use JSON config files."],
      "frequency_rank": 18,
      "tags": ["JSON", "config"],
      "related": ["tsconfig.json", "package.json"],
      "synonyms": ["configuration file"],
      "antonyms": [],
      "pronunciation": "ˈkɒn.fɪɡ faɪl",
      "tts_text": "config file",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Common in all modern JS projects.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 19,
      "word": "draft",
      "part_of_speech": "noun",
      "definition": "A version of the JSON Schema specification, such as draft-07 or draft-2020-12, defining available keywords and validation rules.",
      "example": "Ajv supports JSON Schema draft-07 and later.",
      "examples": ["Use the latest draft for new features."],
      "frequency_rank": 19,
      "tags": ["JSON", "schema"],
      "related": ["JSON Schema", "validation"],
      "synonyms": ["version"],
      "antonyms": [],
      "pronunciation": "drɑːft",
      "tts_text": "draft",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Drafts define the evolution of JSON Schema.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 20,
      "word": "keyword",
      "part_of_speech": "noun",
      "definition": "A reserved word in JSON Schema that specifies validation rules, such as 'type', 'properties', or 'required'.",
      "example": "The 'properties' keyword defines object fields.",
      "examples": ["Each keyword controls a different aspect of validation."],
      "frequency_rank": 20,
      "tags": ["JSON", "schema"],
      "related": ["JSON Schema", "validation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈkiːwɜːrd",
      "tts_text": "keyword",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Keywords are the building blocks of schemas.[2]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 21,
      "word": "properties",
      "part_of_speech": "keyword",
      "definition": "A JSON Schema keyword used to define the expected keys and their schemas in an object.",
      "example": "\"properties\": { \"name\": { \"type\": \"string\" } }",
      "examples": ["Use properties to describe the structure of objects."],
      "frequency_rank": 21,
      "tags": ["JSON", "schema"],
      "related": ["keyword", "object"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈprɒpərtiz",
      "tts_text": "properties",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Defines the schema for each object field.[2]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 22,
      "word": "required",
      "part_of_speech": "keyword",
      "definition": "A JSON Schema keyword that lists the properties which must be present in an object.",
      "example": "\"required\": [\"id\", \"name\"]",
      "examples": ["Required fields must appear in the JSON data."],
      "frequency_rank": 22,
      "tags": ["JSON", "schema"],
      "related": ["keyword", "properties"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈkwaɪərd",
      "tts_text": "required",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Required only applies to object properties.[2]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 23,
      "word": "type keyword",
      "part_of_speech": "keyword",
      "definition": "A JSON Schema keyword that specifies the allowed data type for a value, such as 'string', 'number', or 'object'.",
      "example": "\"type\": \"string\"",
      "examples": ["The type keyword enforces data types in validation."],
      "frequency_rank": 23,
      "tags": ["JSON", "schema"],
      "related": ["keyword", "validation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "taɪp ˈkiːwɜːrd",
      "tts_text": "type keyword",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Supports string, number, object, array, boolean, null.[2]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 24,
      "word": "Ajv",
      "part_of_speech": "noun",
      "definition": "A fast and popular JSON Schema validator for JavaScript and Node.js.",
      "example": "Ajv validates data against complex schemas efficiently.",
      "examples": ["Ajv is widely used in Node.js and Next.js projects."],
      "frequency_rank": 24,
      "tags": ["JSON", "validation", "Node.js"],
      "related": ["JSON Schema", "validation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈeɪdʒiːviː",
      "tts_text": "Ajv",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Transforms schemas into optimized validation functions.[1][6][8]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 25,
      "word": "validator",
      "part_of_speech": "noun",
      "definition": "A library or function that checks if JSON data matches a schema.",
      "example": "Ajv is a JSON Schema validator.",
      "examples": ["Validators ensure data integrity."],
      "frequency_rank": 25,
      "tags": ["JSON", "validation"],
      "related": ["Ajv", "validation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈvælɪdeɪtər",
      "tts_text": "validator",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Can be a library, function, or framework.[1][3][4][6][8]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 26,
      "word": "custom keyword",
      "part_of_speech": "noun",
      "definition": "A user-defined validation rule added to a JSON Schema validator.",
      "example": "Ajv supports custom keywords for advanced validation.",
      "examples": ["Custom keywords extend schema capabilities."],
      "frequency_rank": 26,
      "tags": ["JSON", "schema", "validation"],
      "related": ["keyword", "Ajv"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈkʌstəm ˈkiːwɜːrd",
      "tts_text": "custom keyword",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Add custom logic for domain-specific validation.[3]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 27,
      "word": "dereference",
      "part_of_speech": "verb",
      "definition": "To resolve references ($ref) in a JSON Schema to their actual definitions, often from external files or URLs.",
      "example": "Dereferencing schemas allows reuse and modularity.",
      "examples": ["Some validators fetch remote schemas for dereferencing."],
      "frequency_rank": 27,
      "tags": ["JSON", "schema"],
      "related": ["$ref", "schema"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌdiːˈrɛfərəns",
      "tts_text": "dereference",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Supports modular, maintainable schemas.[3]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 28,
      "word": "$ref",
      "part_of_speech": "keyword",
      "definition": "A JSON Schema keyword used to reference definitions in the same or external schemas.",
      "example": "\"$ref\": \"#/definitions/address\"",
      "examples": ["$ref enables schema reuse and composition."],
      "frequency_rank": 28,
      "tags": ["JSON", "schema"],
      "related": ["dereference", "schema"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɒlər rɛf",
      "tts_text": "dollar ref",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Central for large, modular schemas.[3]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 29,
      "word": "format",
      "part_of_speech": "keyword",
      "definition": "A JSON Schema keyword that specifies a semantic validation format, such as 'email', 'uri', or 'date-time'.",
      "example": "\"format\": \"email\"",
      "examples": ["Format extends validation beyond basic types."],
      "frequency_rank": 29,
      "tags": ["JSON", "schema"],
      "related": ["keyword", "validation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈfɔːrmæt",
      "tts_text": "format",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Supported by most validators including Ajv.[1][6][8]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 30,
      "word": "conditional validation",
      "part_of_speech": "noun",
      "definition": "A JSON Schema feature that applies validation rules based on the presence or value of other properties, using keywords like if, then, else.",
      "example": "\"if\": {\"properties\": {\"role\": {\"const\": \"admin\"}}}, \"then\": {\"required\": [\"adminCode\"]}",
      "examples": ["Conditional validation enables dynamic schemas."],
      "frequency_rank": 30,
      "tags": ["JSON", "schema"],
      "related": ["validation", "keyword"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "kənˈdɪʃənl ˌvælɪˈdeɪʃən",
      "tts_text": "conditional validation",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Useful for complex business logic.[1][6][8]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 31,
      "word": "AJV compile",
      "part_of_speech": "verb",
      "definition": "The process of converting a JSON Schema into a fast validation function using Ajv.",
      "example": "Ajv compile creates optimized code for validation.",
      "examples": ["Compiled schemas validate data quickly."],
      "frequency_rank": 31,
      "tags": ["JSON", "validation"],
      "related": ["Ajv", "validator"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈeɪdʒiːviː kəmˈpaɪl",
      "tts_text": "AJV compile",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Improves speed and efficiency of validation.[1][6][8]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 32,
      "word": "validation error",
      "part_of_speech": "noun",
      "definition": "A message or object produced when JSON data does not conform to the schema.",
      "example": "Ajv returns validation errors for invalid data.",
      "examples": ["Validation errors help debug API issues."],
      "frequency_rank": 32,
      "tags": ["JSON", "validation"],
      "related": ["validator", "Ajv"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌvælɪˈdeɪʃən ˈɛrər",
      "tts_text": "validation error",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Returned as an array of error objects.[1][6][8]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 33,
      "word": "AJV formats",
      "part_of_speech": "noun",
      "definition": "An Ajv extension package that adds support for additional format keywords, such as 'email', 'uri', and 'date-time'.",
      "example": "Install ajv-formats for extended validation.",
      "examples": ["ajv-formats supports many common data types."],
      "frequency_rank": 33,
      "tags": ["JSON", "validation"],
      "related": ["Ajv", "format"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈeɪdʒiːviː ˈfɔːrmæts",
      "tts_text": "AJV formats",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Install with npm for Ajv format validation.[1]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 34,
      "word": "react-jsonschema-form",
      "part_of_speech": "noun",
      "definition": "A React library for generating forms from JSON Schema and validating user input automatically.",
      "example": "react-jsonschema-form builds forms from schemas.",
      "examples": ["It validates form data before submission."],
      "frequency_rank": 34,
      "tags": ["JSON", "React", "validation"],
      "related": ["JSON Schema", "validation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "riːækt dʒeɪsɒn ˈskiːmə fɔːrm",
      "tts_text": "react-jsonschema-form",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Widely used in React admin panels.[9]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 35,
      "word": "JSON-LD",
      "part_of_speech": "noun",
      "definition": "A JSON-based format for encoding linked data and semantic metadata, used for SEO and structured data.",
      "example": "Add JSON-LD to pages for rich search results.",
      "examples": ["Next.js supports JSON-LD for structured data."],
      "frequency_rank": 35,
      "tags": ["JSON", "SEO", "Next.js"],
      "related": ["JSON", "schema"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dʒeɪsɒn ɛl diː",
      "tts_text": "JSON-LD",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Used for Google and schema.org markup.[5]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 36,
      "word": "OpenAPI",
      "part_of_speech": "noun",
      "definition": "A specification for describing RESTful APIs, often using JSON Schema for data validation and documentation.",
      "example": "OpenAPI specs define endpoints and data models.",
      "examples": ["OpenAPI uses JSON Schema for request validation."],
      "frequency_rank": 36,
      "tags": ["JSON", "API", "validation"],
      "related": ["JSON Schema", "Ajv"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌoʊpən ˈeɪpiːaɪ",
      "tts_text": "OpenAPI",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Standard for API docs and validation.[4]",
      "etymology": "",
      "morphology": "",
      "usage": ""
    }
  ]
}
