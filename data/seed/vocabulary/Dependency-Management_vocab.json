{
  "words": [
    {
      "priority": 1,
      "word": "dependency",
      "part_of_speech": "noun",
      "definition": "A software component or package that another piece of software relies on to function properly.",
      "example": "Updating a dependency fixed the security issue.",
      "examples": ["Dependencies are managed by package managers."],
      "frequency_rank": 1,
      "tags": ["dependency management", "package"],
      "related": ["package", "module", "version"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɪˈpɛndənsi",
      "tts_text": "dependency",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Dependencies can be direct or transitive."
    },
    {
      "priority": 2,
      "word": "package",
      "part_of_speech": "noun",
      "definition": "A collection of code, resources, and metadata bundled for distribution and reuse, typically managed by a package manager.",
      "example": "Install the lodash package using npm.",
      "examples": ["Packages are versioned and published to registries."],
      "frequency_rank": 2,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "module", "package manager"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈpækɪdʒ",
      "tts_text": "package",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Packages can contain libraries, tools, or applications."
    },
    {
      "priority": 3,
      "word": "module",
      "part_of_speech": "noun",
      "definition": "A self-contained unit of code that exports functions, classes, or variables for use in other parts of a program.",
      "example": "The fs module provides file system functions in Node.js.",
      "examples": ["Modules promote code reuse and organization."],
      "frequency_rank": 3,
      "tags": ["dependency management", "package"],
      "related": ["package", "dependency", "import"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɒdjuːl",
      "tts_text": "module",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Modules can be ES modules or CommonJS."
    },
    {
      "priority": 4,
      "word": "package manager",
      "part_of_speech": "noun",
      "definition": "A tool that automates the installation, upgrade, configuration, and removal of software packages.",
      "example": "npm is the default package manager for Node.js.",
      "examples": ["Yarn and pip are other popular package managers."],
      "frequency_rank": 4,
      "tags": ["dependency management", "tool"],
      "related": ["package", "dependency", "registry"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈpækɪdʒ ˈmænɪdʒər",
      "tts_text": "package manager",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Package managers resolve and install dependencies."
    },
    {
      "priority": 5,
      "word": "registry",
      "part_of_speech": "noun",
      "definition": "A centralized repository where packages are published, discovered, and downloaded.",
      "example": "npm registry hosts thousands of open source packages.",
      "examples": ["Registries provide versioning and package metadata."],
      "frequency_rank": 5,
      "tags": ["dependency management", "tool"],
      "related": ["package", "package manager"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈrɛdʒɪstri",
      "tts_text": "registry",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Examples: npm, PyPI, Maven Central."
    },
    {
      "priority": 6,
      "word": "version",
      "part_of_speech": "noun",
      "definition": "A specific state or release of a package, module, or software, identified by a version number.",
      "example": "Always specify the version of dependencies in your project.",
      "examples": ["Versioning helps manage updates and compatibility."],
      "frequency_rank": 6,
      "tags": ["dependency management", "package"],
      "related": ["package", "semantic versioning"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈvɜːrʒən",
      "tts_text": "version",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Versions follow semantic or custom schemes."
    },
    {
      "priority": 7,
      "word": "semantic versioning",
      "part_of_speech": "noun",
      "definition": "A versioning scheme that uses a three-part number (major.minor.patch) to indicate compatibility and changes.",
      "example": "Semantic versioning helps avoid breaking changes.",
      "examples": ["SemVer: 2.3.1 means major 2, minor 3, patch 1."],
      "frequency_rank": 7,
      "tags": ["dependency management", "package"],
      "related": ["version", "package"],
      "synonyms": ["semver"],
      "antonyms": [],
      "pronunciation": "sɪˈmæntɪk ˈvɜːrʒənɪŋ",
      "tts_text": "semantic versioning",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Widely adopted for open source packages."
    },
    {
      "priority": 8,
      "word": "lockfile",
      "part_of_speech": "noun",
      "definition": "A file that records the exact versions of dependencies installed, ensuring consistent environments across systems.",
      "example": "The package-lock.json file is a lockfile for npm projects.",
      "examples": ["Lockfiles prevent version drift in deployments."],
      "frequency_rank": 8,
      "tags": ["dependency management", "package"],
      "related": ["package", "version"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈlɒkfaɪl",
      "tts_text": "lockfile",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Yarn uses yarn.lock; pip uses requirements.txt."
    },
    {
      "priority": 9,
      "word": "dependency tree",
      "part_of_speech": "noun",
      "definition": "A hierarchical structure showing all dependencies required by a project, including nested and transitive dependencies.",
      "example": "Use npm ls to view the dependency tree.",
      "examples": ["Complex projects have deep dependency trees."],
      "frequency_rank": 9,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "package"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɪˈpɛndənsi triː",
      "tts_text": "dependency tree",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Helps diagnose conflicts and bloat."
    },
    {
      "priority": 10,
      "word": "transitive dependency",
      "part_of_speech": "noun",
      "definition": "A dependency required by another dependency, not directly by the main project.",
      "example": "Transitive dependencies can introduce hidden vulnerabilities.",
      "examples": ["Package managers resolve transitive dependencies automatically."],
      "frequency_rank": 10,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "dependency tree"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈtrænzɪtɪv dɪˈpɛndənsi",
      "tts_text": "transitive dependency",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Can cause version conflicts and bloat."
    },
    {
      "priority": 11,
      "word": "peer dependency",
      "part_of_speech": "noun",
      "definition": "A dependency that must be provided by the consuming project, often to ensure compatibility between packages.",
      "example": "React plugins often declare React as a peer dependency.",
      "examples": ["Peer dependencies avoid duplicate versions in the tree."],
      "frequency_rank": 11,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "package"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "pɪər dɪˈpɛndənsi",
      "tts_text": "peer dependency",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Common in plugin and framework ecosystems."
    },
    {
      "priority": 12,
      "word": "dev dependency",
      "part_of_speech": "noun",
      "definition": "A dependency required only for development, such as testing or build tools, not needed in production.",
      "example": "Jest is listed as a dev dependency in package.json.",
      "examples": ["Dev dependencies are excluded from production builds."],
      "frequency_rank": 12,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "package"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɛv dɪˈpɛndənsi",
      "tts_text": "dev dependency",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Reduces production attack surface and size."
    },
    {
      "priority": 13,
      "word": "optional dependency",
      "part_of_speech": "noun",
      "definition": "A dependency that is not required for core functionality and can be skipped if unavailable.",
      "example": "Optional dependencies add features but aren't critical.",
      "examples": ["Install failures for optional dependencies don't break builds."],
      "frequency_rank": 13,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "package"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɒpʃənəl dɪˈpɛndənsi",
      "tts_text": "optional dependency",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Useful for cross-platform or optional features."
    },
    {
      "priority": 14,
      "word": "dependency resolution",
      "part_of_speech": "noun",
      "definition": "The process of determining and installing the correct versions of all dependencies required by a project.",
      "example": "Dependency resolution handles conflicts and ensures compatibility.",
      "examples": ["Package managers automate dependency resolution."],
      "frequency_rank": 14,
      "tags": ["dependency management", "package"],
      "related": ["package manager", "dependency"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɪˈpɛndənsi ˌrɛzəˈluːʃən",
      "tts_text": "dependency resolution",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Complex projects may have resolution conflicts."
    },
    {
      "priority": 15,
      "word": "dependency conflict",
      "part_of_speech": "noun",
      "definition": "A situation where two dependencies require incompatible versions of the same package.",
      "example": "Dependency conflicts can break builds or cause bugs.",
      "examples": ["Tools alert on conflicts during installation."],
      "frequency_rank": 15,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "dependency resolution"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɪˈpɛndənsi ˈkɒnflɪkt",
      "tts_text": "dependency conflict",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Conflict resolution strategies vary by package manager."
    },
    {
      "priority": 16,
      "word": "dependency injection",
      "part_of_speech": "noun",
      "definition": "A design pattern where dependencies are provided to a component rather than hard-coded, improving modularity and testability.",
      "example": "Dependency injection frameworks simplify unit testing.",
      "examples": ["Common in large-scale and enterprise applications."],
      "frequency_rank": 16,
      "tags": ["dependency management", "design pattern"],
      "related": ["dependency", "inversion of control"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɪˈpɛndənsi ɪnˈdʒɛkʃən",
      "tts_text": "dependency injection",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Promotes loose coupling and code reuse."
    },
    {
      "priority": 17,
      "word": "inversion of control",
      "part_of_speech": "noun",
      "definition": "A design principle where the control of object creation and binding is transferred from the program to a framework or container.",
      "example": "Inversion of control enables flexible dependency management.",
      "examples": ["Used in frameworks like Angular and Spring."],
      "frequency_rank": 17,
      "tags": ["dependency management", "design pattern"],
      "related": ["dependency injection", "dependency"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪnˈvɜːrʒən ʌv kənˈtroʊl",
      "tts_text": "inversion of control",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Central to many modern frameworks."
    },
    {
      "priority": 18,
      "word": "artifact repository",
      "part_of_speech": "noun",
      "definition": "A storage system for build artifacts, binaries, and packages, supporting versioning and distribution.",
      "example": "Artifacts are published to a repository after a successful build.",
      "examples": ["Artifactory and Nexus are popular artifact repositories."],
      "frequency_rank": 18,
      "tags": ["dependency management", "tool"],
      "related": ["package", "registry"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɑːrtɪˌfækt rɪˈpɒzɪˌtɔːri",
      "tts_text": "artifact repository",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Ensures reproducibility and traceability."
    },
    {
      "priority": 19,
      "word": "code analysis tool",
      "part_of_speech": "noun",
      "definition": "A software tool that automatically examines source code to identify bugs, security vulnerabilities, inefficiencies, and maintainability issues.",
      "example": "SonarQube is a widely used code analysis tool in CI/CD pipelines.",
      "examples": ["Code analysis tools provide actionable insights and improve code quality."],
      "frequency_rank": 19,
      "tags": ["dependency management", "tool"],
      "related": ["static analysis", "dynamic analysis", "linter"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "koʊd əˈnæləsɪs tuːl",
      "tts_text": "code analysis tool",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Examples: SonarQube, Swimm, ESLint, Pylint, Checkmarx."[1][2][3][4][7][8][10]
    },
    {
      "priority": 20,
      "word": "static analysis",
      "part_of_speech": "noun",
      "definition": "The process of examining source code for errors and vulnerabilities without executing the program.",
      "example": "Static analysis detects bugs before code is run.",
      "examples": ["Tools like Pylint and ESLint perform static analysis."],
      "frequency_rank": 20,
      "tags": ["dependency management", "tool"],
      "related": ["code analysis tool", "linter"],
      "synonyms": [],
      "antonyms": ["dynamic analysis"],
      "pronunciation": "ˈstætɪk əˈnæləsɪs",
      "tts_text": "static analysis",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Essential for early bug and security detection."[1][2][3][4][8][10]
    },
    {
      "priority": 21,
      "word": "dynamic analysis",
      "part_of_speech": "noun",
      "definition": "The process of analyzing a program’s behavior during execution to find runtime errors, memory leaks, and vulnerabilities.",
      "example": "Dynamic analysis tools catch issues that only appear at runtime.",
      "examples": ["Valgrind and AppDynamics are dynamic analysis tools."],
      "frequency_rank": 21,
      "tags": ["dependency management", "tool"],
      "related": ["code analysis tool", "static analysis"],
      "synonyms": [],
      "antonyms": ["static analysis"],
      "pronunciation": "daɪˈnæmɪk əˈnæləsɪs",
      "tts_text": "dynamic analysis",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Complements static analysis for full coverage."[1][2][3][9]
    },
    {
      "priority": 22,
      "word": "linter",
      "part_of_speech": "noun",
      "definition": "A tool that checks source code for stylistic errors, coding standard violations, and potential bugs.",
      "example": "ESLint is a popular linter for JavaScript projects.",
      "examples": ["Linters enforce consistent code style and quality."],
      "frequency_rank": 22,
      "tags": ["dependency management", "tool"],
      "related": ["static analysis", "code analysis tool"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈlɪntər",
      "tts_text": "linter",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Linters can be language-specific or general-purpose."[1][3][6][8]
    },
    {
      "priority": 23,
      "word": "code smell",
      "part_of_speech": "noun",
      "definition": "A pattern in code that may indicate a deeper problem or lead to maintainability issues, even if not technically incorrect.",
      "example": "Long functions and duplicated code are common code smells.",
      "examples": ["Code analysis tools highlight code smells for refactoring."],
      "frequency_rank": 23,
      "tags": ["dependency management", "quality"],
      "related": ["linter", "static analysis"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "koʊd smɛl",
      "tts_text": "code smell",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Addressing code smells improves maintainability."[1][3][8]
    },
    {
      "priority": 24,
      "word": "refactoring",
      "part_of_speech": "noun",
      "definition": "The process of restructuring existing code without changing its external behavior to improve readability, maintainability, or performance.",
      "example": "Refactoring removes code smells and simplifies logic.",
      "examples": ["Regular refactoring keeps codebases healthy."],
      "frequency_rank": 24,
      "tags": ["dependency management", "quality"],
      "related": ["code smell", "static analysis"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌriːˈfæktərɪŋ",
      "tts_text": "refactoring",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Often guided by code analysis tools."[1][3][8]
    },
    {
      "priority": 25,
      "word": "code coverage",
      "part_of_speech": "noun",
      "definition": "A metric that measures the percentage of source code executed during automated tests.",
      "example": "High code coverage increases confidence in the codebase.",
      "examples": ["Coverage tools identify untested code paths."],
      "frequency_rank": 25,
      "tags": ["dependency management", "quality"],
      "related": ["test coverage", "static analysis"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "koʊd ˈkʌvərɪdʒ",
      "tts_text": "code coverage",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Coverage reports are used in CI/CD pipelines."[1][3]
    },
    {
      "priority": 26,
      "word": "continuous integration",
      "part_of_speech": "noun",
      "definition": "A development practice where code changes are automatically built, tested, and merged into a shared repository multiple times a day.",
      "example": "Continuous integration ensures new code doesn’t break the build.",
      "examples": ["CI tools run tests and code analysis on every commit."],
      "frequency_rank": 26,
      "tags": ["dependency management", "DevOps"],
      "related": ["CI/CD", "code analysis tool"],
      "synonyms": ["CI"],
      "antonyms": [],
      "pronunciation": "kənˈtɪnjuəs ˌɪntɪˈɡreɪʃən",
      "tts_text": "continuous integration",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Automates builds, tests, and quality checks."[1][2][3]
    },
    {
      "priority": 27,
      "word": "dependency audit",
      "part_of_speech": "noun",
      "definition": "A review or automated scan of a project’s dependencies to identify vulnerabilities, outdated packages, or license issues.",
      "example": "Run a dependency audit before releasing new versions.",
      "examples": ["Audit tools flag insecure or deprecated packages."],
      "frequency_rank": 27,
      "tags": ["dependency management", "security"],
      "related": ["code analysis tool", "static analysis"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɪˈpɛndənsi ˈɔːdɪt",
      "tts_text": "dependency audit",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "npm audit and Snyk are common tools."[1][2][3]
    },
    {
      "priority": 28,
      "word": "license compliance",
      "part_of_speech": "noun",
      "definition": "The practice of ensuring that all software dependencies are used in accordance with their legal licenses.",
      "example": "License compliance checks prevent legal risks from open source use.",
      "examples": ["Automated tools scan for license compliance in dependencies."],
      "frequency_rank": 28,
      "tags": ["dependency management", "security"],
      "related": ["dependency audit", "registry"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈlaɪsəns kəmˈplaɪəns",
      "tts_text": "license compliance",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Critical for legal and business risk management."
    },
    {
      "priority": 29,
      "word": "supply chain security",
      "part_of_speech": "noun",
      "definition": "Measures and tools to secure software dependencies and third-party components from vulnerabilities and tampering.",
      "example": "Supply chain security scans dependencies for risks.",
      "examples": ["SCA and audit tools reduce supply chain attacks."],
      "frequency_rank": 29,
      "tags": ["dependency management", "security"],
      "related": ["dependency audit", "static analysis"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "səˈplaɪ tʃeɪn sɪˈkjʊrɪti",
      "tts_text": "supply chain security",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Increasingly important for modern software."[1][2][3]
    },
    {
      "priority": 30,
      "word": "upgrade",
      "part_of_speech": "verb",
      "definition": "To update a package or dependency to a newer version, often to gain features, improvements, or security fixes.",
      "example": "Upgrade dependencies regularly to avoid vulnerabilities.",
      "examples": ["Automated tools can upgrade packages safely."],
      "frequency_rank": 30,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "version"],
      "synonyms": [],
      "antonyms": ["downgrade"],
      "pronunciation": "ˈʌpɡreɪd",
      "tts_text": "upgrade",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Upgrades may require compatibility testing."
    },
    {
      "priority": 31,
      "word": "downgrade",
      "part_of_speech": "verb",
      "definition": "To revert a package or dependency to an older version, usually to restore compatibility or stability.",
      "example": "Downgrade a library if a new version breaks your code.",
      "examples": ["Downgrades are sometimes needed for legacy systems."],
      "frequency_rank": 31,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "version"],
      "synonyms": [],
      "antonyms": ["upgrade"],
      "pronunciation": "ˈdaʊnɡreɪd",
      "tts_text": "downgrade",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Should be documented and tested."
    },
    {
      "priority": 32,
      "word": "pinning",
      "part_of_speech": "noun",
      "definition": "The practice of specifying exact versions of dependencies to avoid unexpected changes or incompatibilities.",
      "example": "Pinning dependencies ensures reproducible builds.",
      "examples": ["Pin versions in lockfiles or requirements files."],
      "frequency_rank": 32,
      "tags": ["dependency management", "package"],
      "related": ["lockfile", "version"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈpɪnɪŋ",
      "tts_text": "pinning",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Prevents accidental breaking changes."
    },
    {
      "priority": 33,
      "word": "submodule",
      "part_of_speech": "noun",
      "definition": "A repository or module included within another repository, often to manage shared dependencies or code.",
      "example": "Use Git submodules to manage external libraries.",
      "examples": ["Submodules require explicit updates and tracking."],
      "frequency_rank": 33,
      "tags": ["dependency management", "version control"],
      "related": ["module", "dependency"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈsʌbˌmɒdjuːl",
      "tts_text": "submodule",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Common in Git for nested projects."
    },
    {
      "priority": 34,
      "word": "monorepo",
      "part_of_speech": "noun",
      "definition": "A single repository that stores code for multiple projects, packages, or services, often with shared dependencies.",
      "example": "Large organizations use monorepos for unified dependency management.",
      "examples": ["Monorepos simplify code sharing and refactoring."],
      "frequency_rank": 34,
      "tags": ["dependency management", "version control"],
      "related": ["submodule", "package"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈmɒnəˌriːpoʊ",
      "tts_text": "monorepo",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Requires tooling for dependency boundaries."
    },
    {
      "priority": 35,
      "word": "polyrepo",
      "part_of_speech": "noun",
      "definition": "A development approach where each project or service has its own separate repository, as opposed to a monorepo.",
      "example": "Polyrepos offer isolation but can complicate dependency management.",
      "examples": ["Polyrepo structures are common in microservices architectures."],
      "frequency_rank": 35,
      "tags": ["dependency management", "version control"],
      "related": ["monorepo", "submodule"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈpɒliˌriːpoʊ",
      "tts_text": "polyrepo",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Trade-off between isolation and coordination."
    },
    {
      "priority": 36,
      "word": "vendoring",
      "part_of_speech": "noun",
      "definition": "The practice of including dependency source code directly in a project’s repository to ensure availability and stability.",
      "example": "Vendoring dependencies can improve build reliability in critical systems.",
      "examples": ["Go modules support vendoring for reproducible builds."],
      "frequency_rank": 36,
      "tags": ["dependency management", "package"],
      "related": ["dependency", "module"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈvɛndərɪŋ",
      "tts_text": "vendoring",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Ensures dependencies are always available, even offline."
    }
  ]
}
