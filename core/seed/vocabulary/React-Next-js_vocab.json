{
  "words": [
    {
      "priority": 1,
      "word": "React",
      "part_of_speech": "noun",
      "definition": "A JavaScript library for building user interfaces using components.",
      "example": "React makes it easy to create interactive UIs.",
      "examples": ["React is maintained by Meta."],
      "frequency_rank": 1,
      "tags": ["framework", "library"],
      "related": ["Next.js", "component"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "riˈækt",
      "tts_text": "React",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "React is the foundation of the codebase.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 2,
      "word": "Next.js",
      "part_of_speech": "noun",
      "definition": "A React-based framework for server-side rendering, static site generation, and advanced routing.",
      "example": "Next.js enables fast, SEO-friendly web apps.",
      "examples": ["Next.js supports API routes and dynamic pages."],
      "frequency_rank": 2,
      "tags": ["framework"],
      "related": ["React", "SSR", "SSG"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "nɛkst dʒɛs",
      "tts_text": "Next dot js",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Next.js builds on React for production apps.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 3,
      "word": "component",
      "part_of_speech": "noun",
      "definition": "A reusable, self-contained building block for UIs in React and Next.js.",
      "example": "Each button is a separate component.",
      "examples": ["Components can be nested and composed."],
      "frequency_rank": 3,
      "tags": ["React", "Next.js"],
      "related": ["props", "state", "hook"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "kəmˈpoʊnənt",
      "tts_text": "component",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "The building block of all React UIs.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 4,
      "word": "props",
      "part_of_speech": "noun",
      "definition": "Inputs passed to a component to customize its behavior or appearance.",
      "example": "Props pass data from parent to child components.",
      "examples": ["Use props to configure a button's label."],
      "frequency_rank": 4,
      "tags": ["React", "Next.js"],
      "related": ["component", "state"],
      "synonyms": ["properties"],
      "antonyms": [],
      "pronunciation": "prɒps",
      "tts_text": "props",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Short for 'properties'.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 5,
      "word": "state",
      "part_of_speech": "noun",
      "definition": "Internal data managed by a component that determines its dynamic behavior.",
      "example": "State tracks user input in a form.",
      "examples": ["State updates cause components to re-render."],
      "frequency_rank": 5,
      "tags": ["React", "Next.js"],
      "related": ["component", "hook"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "steɪt",
      "tts_text": "state",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Managed with useState or useReducer.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 6,
      "word": "hook",
      "part_of_speech": "noun",
      "definition": "A special function in React for managing state, lifecycle, or side effects in functional components.",
      "example": "The useEffect hook runs code after rendering.",
      "examples": ["Custom hooks encapsulate reusable logic."],
      "frequency_rank": 6,
      "tags": ["React"],
      "related": ["state", "useEffect", "useState"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "hʊk",
      "tts_text": "hook",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Hooks start with 'use'.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 7,
      "word": "useState",
      "part_of_speech": "function",
      "definition": "A React hook for adding state to functional components.",
      "example": "useState manages the count value.",
      "examples": ["const [count, setCount] = useState(0);"],
      "frequency_rank": 7,
      "tags": ["React"],
      "related": ["state", "hook"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "juːz steɪt",
      "tts_text": "useState",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Returns a stateful value and setter.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 8,
      "word": "useEffect",
      "part_of_speech": "function",
      "definition": "A React hook for handling side effects such as data fetching or subscriptions.",
      "example": "useEffect runs after every render by default.",
      "examples": ["useEffect(() => { fetchData(); }, []);"],
      "frequency_rank": 8,
      "tags": ["React"],
      "related": ["hook", "effect"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "juːz ɪˈfɛkt",
      "tts_text": "useEffect",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Dependency array controls when it runs.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 9,
      "word": "context",
      "part_of_speech": "noun",
      "definition": "A way to share data globally across the component tree without passing props manually at every level.",
      "example": "Theme context provides color settings to all components.",
      "examples": ["Context is useful for authentication state."],
      "frequency_rank": 9,
      "tags": ["React"],
      "related": ["provider", "consumer"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈkɒn.tɛkst",
      "tts_text": "context",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Created with React.createContext.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 10,
      "word": "provider",
      "part_of_speech": "noun",
      "definition": "A component that supplies context data to its descendants.",
      "example": "Wrap your app in a ThemeProvider.",
      "examples": ["Providers are used with React context."],
      "frequency_rank": 10,
      "tags": ["React"],
      "related": ["context", "consumer"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "prəˈvaɪ.dər",
      "tts_text": "provider",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Provider is a context pattern.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 11,
      "word": "consumer",
      "part_of_speech": "noun",
      "definition": "A component or function that reads data from a React context.",
      "example": "Consumers access values from the nearest provider.",
      "examples": ["useContext is a consumer hook."],
      "frequency_rank": 11,
      "tags": ["React"],
      "related": ["context", "provider"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "kənˈsjuː.mər",
      "tts_text": "consumer",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "useContext replaces Consumer in most cases.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 12,
      "word": "JSX",
      "part_of_speech": "noun",
      "definition": "A syntax extension for JavaScript that allows writing HTML-like code in React components.",
      "example": "JSX makes UI code more readable.",
      "examples": ["JSX is compiled to JavaScript."],
      "frequency_rank": 12,
      "tags": ["React"],
      "related": ["component", "TSX"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dʒeɪ ɛs ɛks",
      "tts_text": "JSX",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "JSX enables declarative UI.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 13,
      "word": "TSX",
      "part_of_speech": "noun",
      "definition": "A TypeScript extension for JSX, used in React components with TypeScript.",
      "example": "TSX files combine TypeScript and JSX syntax.",
      "examples": ["Use .tsx for typed React components."],
      "frequency_rank": 13,
      "tags": ["React", "TypeScript"],
      "related": ["JSX", "TypeScript"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "tiː ɛs ɛks",
      "tts_text": "TSX",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "TSX is required for typed React UI.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 14,
      "word": "render",
      "part_of_speech": "verb",
      "definition": "To generate and display UI elements based on code and data.",
      "example": "React components render UI from props and state.",
      "examples": ["The render function returns JSX."],
      "frequency_rank": 14,
      "tags": ["React"],
      "related": ["component", "virtual DOM"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈrɛndər",
      "tts_text": "render",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Rendering is core to React and Next.js.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 15,
      "word": "virtual DOM",
      "part_of_speech": "noun",
      "definition": "A lightweight copy of the real DOM used by React to optimize UI updates.",
      "example": "The virtual DOM improves rendering speed.",
      "examples": ["React computes changes in the virtual DOM before updating the real DOM."],
      "frequency_rank": 15,
      "tags": ["React"],
      "related": ["render", "reconciliation"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈvɜːrtʃuəl dɒm",
      "tts_text": "virtual DOM",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Central to React's efficiency.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 16,
      "word": "reconciliation",
      "part_of_speech": "noun",
      "definition": "The process by which React updates the DOM by comparing the new virtual DOM with the previous one and applying minimal changes.",
      "example": "Reconciliation ensures efficient UI updates.",
      "examples": ["React's diffing algorithm handles reconciliation."],
      "frequency_rank": 16,
      "tags": ["React"],
      "related": ["virtual DOM", "render"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌrɛk.ənˌsɪl.iˈeɪ.ʃən",
      "tts_text": "reconciliation",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Optimizes UI performance.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 17,
      "word": "fragment",
      "part_of_speech": "noun",
      "definition": "A React feature that allows grouping multiple elements without adding extra nodes to the DOM.",
      "example": "Use fragments to return multiple elements from a component.",
      "examples": ["<>...</> is a shorthand for React.Fragment."],
      "frequency_rank": 17,
      "tags": ["React"],
      "related": ["component", "JSX"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈfræɡ.mənt",
      "tts_text": "fragment",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Fragments avoid extra DOM nodes.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 18,
      "word": "portal",
      "part_of_speech": "noun",
      "definition": "A React feature for rendering children into a DOM node outside the parent component hierarchy.",
      "example": "Portals are used for modals and tooltips.",
      "examples": ["ReactDOM.createPortal renders elements elsewhere in the DOM."],
      "frequency_rank": 18,
      "tags": ["React"],
      "related": ["component", "DOM"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈpɔːr.tl",
      "tts_text": "portal",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Useful for overlays and modals.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 19,
      "word": "useContext",
      "part_of_speech": "function",
      "definition": "A React hook for accessing the current value of a context.",
      "example": "useContext retrieves authentication data from AuthContext.",
      "examples": ["const theme = useContext(ThemeContext);"],
      "frequency_rank": 19,
      "tags": ["React", "hook"],
      "related": ["context", "provider", "consumer"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "juːz ˈkɒn.tɛkst",
      "tts_text": "useContext",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Simplifies context consumption in components.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 20,
      "word": "useMemo",
      "part_of_speech": "function",
      "definition": "A React hook that memoizes the result of a function to optimize performance.",
      "example": "useMemo caches expensive computations.",
      "examples": ["const filtered = useMemo(() => items.filter(...), [items]);"],
      "frequency_rank": 20,
      "tags": ["React", "hook"],
      "related": ["hook", "performance"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "juːz ˈmiː.moʊ",
      "tts_text": "useMemo",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Improves performance by avoiding unnecessary recalculation.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 21,
      "word": "useCallback",
      "part_of_speech": "function",
      "definition": "A React hook that memoizes a callback function to prevent unnecessary re-renders.",
      "example": "useCallback is used for event handlers.",
      "examples": ["const handleClick = useCallback(() => {...}, []);"],
      "frequency_rank": 21,
      "tags": ["React", "hook"],
      "related": ["hook", "performance"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "juːz ˈkɔːlˌbæk",
      "tts_text": "useCallback",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Reduces unnecessary renders in child components.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 22,
      "word": "useReducer",
      "part_of_speech": "function",
      "definition": "A React hook for managing complex state logic using reducers.",
      "example": "useReducer is useful for state machines.",
      "examples": ["const [state, dispatch] = useReducer(reducer, initialState);"],
      "frequency_rank": 22,
      "tags": ["React", "hook"],
      "related": ["reducer", "state", "hook"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "juːz rɪˈdjuːsər",
      "tts_text": "useReducer",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Ideal for managing state with multiple sub-values.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 23,
      "word": "custom hook",
      "part_of_speech": "noun",
      "definition": "A reusable function that starts with 'use' and encapsulates React hook logic.",
      "example": "Create a custom hook for form validation.",
      "examples": ["Custom hooks simplify code reuse."],
      "frequency_rank": 23,
      "tags": ["React", "hook"],
      "related": ["hook", "useState", "useEffect"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈkʌstəm hʊk",
      "tts_text": "custom hook",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Encapsulates and shares logic across components.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 24,
      "word": "higher-order component",
      "part_of_speech": "noun",
      "definition": "A function that takes a component and returns a new component with enhanced behavior.",
      "example": "withAuth is a higher-order component for authentication.",
      "examples": ["HOCs are used for cross-cutting concerns."],
      "frequency_rank": 24,
      "tags": ["React", "pattern"],
      "related": ["component", "pattern"],
      "synonyms": ["HOC"],
      "antonyms": [],
      "pronunciation": "ˈhaɪər ˈɔːrdər kəmˈpoʊnənt",
      "tts_text": "higher-order component",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Pattern for code reuse before hooks.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 25,
      "word": "render prop",
      "part_of_speech": "noun",
      "definition": "A technique for sharing code between components using a function prop that returns elements.",
      "example": "A render prop provides custom rendering logic.",
      "examples": ["Use render props for flexible UIs."],
      "frequency_rank": 25,
      "tags": ["React", "pattern"],
      "related": ["component", "pattern"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈrɛndər prɒp",
      "tts_text": "render prop",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Pattern for dynamic rendering before hooks.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 26,
      "word": "error boundary",
      "part_of_speech": "noun",
      "definition": "A React component that catches JavaScript errors in its child component tree and displays a fallback UI.",
      "example": "Wrap your app in an error boundary to handle crashes.",
      "examples": ["Error boundaries prevent entire app crashes."],
      "frequency_rank": 26,
      "tags": ["React", "error"],
      "related": ["component", "error"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɛrər ˈbaʊndəri",
      "tts_text": "error boundary",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Only works for class components.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 27,
      "word": "suspense",
      "part_of_speech": "noun",
      "definition": "A React feature for handling asynchronous loading of components with fallback UIs.",
      "example": "Use Suspense to show loading spinners.",
      "examples": ["Suspense works with lazy-loaded components."],
      "frequency_rank": 27,
      "tags": ["React", "async"],
      "related": ["lazy", "fallback"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "səˈspɛns",
      "tts_text": "suspense",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Enables async UI patterns.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 28,
      "word": "lazy",
      "part_of_speech": "function",
      "definition": "A React function for code-splitting and loading components only when needed.",
      "example": "React.lazy enables on-demand loading.",
      "examples": ["Combine lazy with Suspense for dynamic imports."],
      "frequency_rank": 28,
      "tags": ["React", "async"],
      "related": ["suspense", "dynamic import"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈleɪzi",
      "tts_text": "lazy",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Improves performance by splitting bundles.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 29,
      "word": "dynamic import",
      "part_of_speech": "noun",
      "definition": "A JavaScript feature for loading modules asynchronously, used in React for code-splitting.",
      "example": "Dynamic imports reduce initial bundle size.",
      "examples": ["Next.js supports dynamic imports for components."],
      "frequency_rank": 29,
      "tags": ["React", "Next.js", "async"],
      "related": ["lazy", "suspense"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "daɪˈnæmɪk ˈɪmpɔːrt",
      "tts_text": "dynamic import",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Used for code-splitting and SSR.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 30,
      "word": "getServerSideProps",
      "part_of_speech": "function",
      "definition": "A Next.js function for fetching data at request time for server-side rendering.",
      "example": "getServerSideProps runs on every page request.",
      "examples": ["Use getServerSideProps for dynamic SSR pages."],
      "frequency_rank": 30,
      "tags": ["Next.js", "SSR"],
      "related": ["SSR", "data fetching"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɡɛt ˈsɜːrvər saɪd prɒps",
      "tts_text": "getServerSideProps",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Used for dynamic, server-rendered pages.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 31,
      "word": "getStaticProps",
      "part_of_speech": "function",
      "definition": "A Next.js function for fetching data at build time for static site generation.",
      "example": "getStaticProps pre-renders pages at build.",
      "examples": ["Use getStaticProps for blog posts."],
      "frequency_rank": 31,
      "tags": ["Next.js", "SSG"],
      "related": ["SSG", "data fetching"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɡɛt ˈstætɪk prɒps",
      "tts_text": "getStaticProps",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Used for static, pre-rendered pages.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 32,
      "word": "getStaticPaths",
      "part_of_speech": "function",
      "definition": "A Next.js function for specifying dynamic routes to pre-render with getStaticProps.",
      "example": "getStaticPaths defines which blog pages to build.",
      "examples": ["Use getStaticPaths for dynamic SSG routes."],
      "frequency_rank": 32,
      "tags": ["Next.js", "SSG"],
      "related": ["SSG", "routing"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɡɛt ˈstætɪk pæθs",
      "tts_text": "getStaticPaths",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Used for static generation of dynamic routes.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 33,
      "word": "ISR",
      "part_of_speech": "noun",
      "definition": "Incremental Static Regeneration, a Next.js feature that updates static pages after deployment without rebuilding the whole site.",
      "example": "ISR enables real-time content updates.",
      "examples": ["ISR combines SSG speed with dynamic content."],
      "frequency_rank": 33,
      "tags": ["Next.js", "SSG"],
      "related": ["SSG", "SSR"],
      "synonyms": ["incremental static regeneration"],
      "antonyms": [],
      "pronunciation": "ˌaɪ ɛs ɑːr",
      "tts_text": "ISR",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Unique to Next.js for hybrid rendering.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 34,
      "word": "app directory",
      "part_of_speech": "noun",
      "definition": "A Next.js folder for organizing application routes and layouts using the new app router.",
      "example": "The app directory replaces the pages directory in Next.js 13+.",
      "examples": ["App directory enables advanced routing and layouts."],
      "frequency_rank": 34,
      "tags": ["Next.js", "routing"],
      "related": ["routing", "layout"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "æp dəˈrɛktəri",
      "tts_text": "app directory",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Central to Next.js 13+ routing.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 35,
      "word": "page props",
      "part_of_speech": "noun",
      "definition": "Props passed to a Next.js page component, often from getServerSideProps or getStaticProps.",
      "example": "Page props contain data fetched for rendering.",
      "examples": ["Access page props in your page component."],
      "frequency_rank": 35,
      "tags": ["Next.js", "props"],
      "related": ["props", "data fetching"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "peɪdʒ prɒps",
      "tts_text": "page props",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Key for dynamic and static data in Next.js.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    },
    {
      "priority": 36,
      "word": "fallback",
      "part_of_speech": "noun",
      "definition": "A loading or placeholder UI shown while a dynamic or static page is being generated or loaded.",
      "example": "Show a fallback while data loads.",
      "examples": ["Fallbacks improve user experience during loading."],
      "frequency_rank": 36,
      "tags": ["React", "Next.js", "async"],
      "related": ["suspense", "lazy"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈfɔːlbæk",
      "tts_text": "fallback",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Used for loading states and SSG fallback.",
      "etymology": "",
      "morphology": "",
      "usage": ""
    }
  ]
}
