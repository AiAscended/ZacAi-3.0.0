{
  "words": [
    {
      "priority": 1,
      "word": "error",
      "part_of_speech": "noun",
      "definition": "An unexpected condition or problem that occurs during the execution of a program, causing it to behave incorrectly or stop running.",
      "example": "A syntax error caused the script to fail.",
      "examples": ["Errors can be logical, runtime, or syntax-related."],
      "frequency_rank": 1,
      "tags": ["debugging", "error handling"],
      "related": ["bug", "exception", "fault"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈɛrər",
      "tts_text": "error",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Errors are detected and handled to prevent crashes."[2][3][6][7]
    },
    {
      "priority": 2,
      "word": "bug",
      "part_of_speech": "noun",
      "definition": "A flaw or defect in software that causes it to operate incorrectly or produce unintended results.",
      "example": "A bug in the login code allowed unauthorized access.",
      "examples": ["Bugs are found and fixed through debugging."],
      "frequency_rank": 2,
      "tags": ["debugging", "error handling"],
      "related": ["error", "fault", "defect"],
      "synonyms": ["defect", "issue"],
      "antonyms": [],
      "pronunciation": "bʌɡ",
      "tts_text": "bug",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "The term originated from early computer history."[5]
    },
    {
      "priority": 3,
      "word": "exception",
      "part_of_speech": "noun",
      "definition": "An error or unexpected event that disrupts the normal flow of a program, often handled with special code.",
      "example": "A divide-by-zero exception was thrown during calculation.",
      "examples": ["Exceptions are caught and handled to prevent crashes."],
      "frequency_rank": 3,
      "tags": ["debugging", "error handling"],
      "related": ["error", "try-catch", "throw"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ɪkˈsɛpʃən",
      "tts_text": "exception",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Languages use try-catch or similar constructs."[2][7]
    },
    {
      "priority": 4,
      "word": "try-catch",
      "part_of_speech": "noun",
      "definition": "A programming construct used to handle exceptions by trying a block of code and catching errors if they occur.",
      "example": "Use try-catch to handle file reading errors gracefully.",
      "examples": ["Try-catch blocks prevent unhandled exceptions."],
      "frequency_rank": 4,
      "tags": ["debugging", "error handling"],
      "related": ["exception", "throw", "finally"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "traɪ kætʃ",
      "tts_text": "try catch",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Improves software robustness and user experience."[2][7]
    },
    {
      "priority": 5,
      "word": "throw",
      "part_of_speech": "verb",
      "definition": "To signal the occurrence of an exception or error in a program, often causing control to transfer to a catch block.",
      "example": "The function throws an error if input is invalid.",
      "examples": ["Use throw to indicate fatal problems in code."],
      "frequency_rank": 5,
      "tags": ["debugging", "error handling"],
      "related": ["exception", "try-catch"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "θroʊ",
      "tts_text": "throw",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Throw is used in many programming languages."
    },
    {
      "priority": 6,
      "word": "catch",
      "part_of_speech": "verb",
      "definition": "To handle an exception or error that has been thrown, usually by executing recovery or fallback logic.",
      "example": "Catch blocks log errors and show user-friendly messages.",
      "examples": ["Always catch exceptions to avoid program crashes."],
      "frequency_rank": 6,
      "tags": ["debugging", "error handling"],
      "related": ["try-catch", "exception"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "kætʃ",
      "tts_text": "catch",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Catching errors allows graceful recovery."
    },
    {
      "priority": 7,
      "word": "finally",
      "part_of_speech": "keyword",
      "definition": "A code block that always executes after try-catch, used for cleanup regardless of whether an error occurred.",
      "example": "Use finally to close files or release resources.",
      "examples": ["Finally blocks run after try or catch completes."],
      "frequency_rank": 7,
      "tags": ["debugging", "error handling"],
      "related": ["try-catch", "exception"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈfaɪnəli",
      "tts_text": "finally",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Ensures resources are always cleaned up."
    },
    {
      "priority": 8,
      "word": "logging",
      "part_of_speech": "noun",
      "definition": "The practice of recording events, errors, and informational messages during program execution for diagnosis and analysis.",
      "example": "Logging errors helps trace issues in production.",
      "examples": ["Logs are critical for debugging and audits."],
      "frequency_rank": 8,
      "tags": ["debugging", "error handling"],
      "related": ["log", "trace", "monitoring"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈlɒɡɪŋ",
      "tts_text": "logging",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Structured logging improves automated analysis."[2]
    },
    {
      "priority": 9,
      "word": "stack trace",
      "part_of_speech": "noun",
      "definition": "A report showing the sequence of function calls leading to an error or exception in a program.",
      "example": "The stack trace pinpointed the source of the bug.",
      "examples": ["Stack traces are included in error logs for debugging."],
      "frequency_rank": 9,
      "tags": ["debugging", "error handling"],
      "related": ["exception", "logging"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "stæk treɪs",
      "tts_text": "stack trace",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Essential for root cause analysis."[3][5]
    },
    {
      "priority": 10,
      "word": "breakpoint",
      "part_of_speech": "noun",
      "definition": "A marker set in code that pauses program execution at a specific line for inspection during debugging.",
      "example": "Set a breakpoint to examine variable values at runtime.",
      "examples": ["Breakpoints are used in interactive debuggers."],
      "frequency_rank": 10,
      "tags": ["debugging", "error handling"],
      "related": ["debugger", "step over"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈbreɪkpɔɪnt",
      "tts_text": "breakpoint",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Breakpoints help isolate bugs during development."[1][3]
    },
    {
      "priority": 11,
      "word": "debugger",
      "part_of_speech": "noun",
      "definition": "A tool or program that helps developers inspect, control, and step through code execution to find and fix bugs.",
      "example": "Use a debugger to step through code line by line.",
      "examples": ["Debuggers support breakpoints, watches, and variable inspection."],
      "frequency_rank": 11,
      "tags": ["debugging", "error handling"],
      "related": ["breakpoint", "step over", "logging"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "dɪˈbʌɡər",
      "tts_text": "debugger",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Most IDEs include built-in debuggers."[1][3][4]
    },
    {
      "priority": 12,
      "word": "step over",
      "part_of_speech": "verb",
      "definition": "A debugging action that executes the current line of code and moves to the next, skipping over function calls.",
      "example": "Use step over to run code without entering functions.",
      "examples": ["Step over is useful for quickly progressing through code."],
      "frequency_rank": 12,
      "tags": ["debugging", "error handling"],
      "related": ["debugger", "breakpoint"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "stɛp ˈoʊvər",
      "tts_text": "step over",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Common in interactive debugging sessions."
    },
    {
      "priority": 13,
      "word": "step into",
      "part_of_speech": "verb",
      "definition": "A debugging action that enters a function call on the current line, allowing inspection of its internal execution.",
      "example": "Step into to debug inside called functions.",
      "examples": ["Step into helps trace logic across multiple functions."],
      "frequency_rank": 13,
      "tags": ["debugging", "error handling"],
      "related": ["debugger", "breakpoint"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "stɛp ˈɪntuː",
      "tts_text": "step into",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Essential for in-depth debugging."
    },
    {
      "priority": 14,
      "word": "step out",
      "part_of_speech": "verb",
      "definition": "A debugging action that completes the current function and returns to the calling context.",
      "example": "Step out to finish a function and resume at the caller.",
      "examples": ["Step out is used after inspecting a function's logic."],
      "frequency_rank": 14,
      "tags": ["debugging", "error handling"],
      "related": ["debugger", "breakpoint"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "stɛp aʊt",
      "tts_text": "step out",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Speeds up navigation in deep call stacks."
    },
    {
      "priority": 15,
      "word": "assertion",
      "part_of_speech": "noun",
      "definition": "A statement in code that checks if a condition is true; if not, it raises an error or exception.",
      "example": "Assertions catch logic errors during development.",
      "examples": ["Use assertions to enforce invariants in code."],
      "frequency_rank": 15,
      "tags": ["debugging", "error handling"],
      "related": ["exception", "test"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "əˈsɜːrʃən",
      "tts_text": "assertion",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Assertions are removed in production builds."
    },
    {
      "priority": 16,
      "word": "core dump",
      "part_of_speech": "noun",
      "definition": "A file containing a snapshot of a program's memory at the moment it crashed, used for post-mortem debugging.",
      "example": "Analyze the core dump to find the cause of the crash.",
      "examples": ["Core dumps are generated on fatal errors or signals."],
      "frequency_rank": 16,
      "tags": ["debugging", "error handling"],
      "related": ["stack trace", "crash"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "kɔːr dʌmp",
      "tts_text": "core dump",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Core dumps aid in root cause analysis."
    },
    {
      "priority": 17,
      "word": "panic",
      "part_of_speech": "noun",
      "definition": "A runtime state where a program encounters a fatal error and is forced to terminate, often producing a stack trace or core dump.",
      "example": "A panic occurred due to an unhandled null pointer.",
      "examples": ["Panics are used in Go and other languages for fatal errors."],
      "frequency_rank": 17,
      "tags": ["debugging", "error handling"],
      "related": ["crash", "exception"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈpænɪk",
      "tts_text": "panic",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Panics should be handled or recovered from if possible."
    },
    {
      "priority": 18,
      "word": "fault",
      "part_of_speech": "noun",
      "definition": "A defect or flaw in software that may cause an error or failure under certain conditions.",
      "example": "A memory fault led to unpredictable behavior.",
      "examples": ["Faults are detected and corrected during debugging."],
      "frequency_rank": 18,
      "tags": ["debugging", "error handling"],
      "related": ["bug", "error", "defect"],
      "synonyms": ["defect"],
      "antonyms": [],
      "pronunciation": "fɔːlt",
      "tts_text": "fault",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Faults may not always result in visible errors."
    },
    {
      "priority": 19,
      "word": "defect",
      "part_of_speech": "noun",
      "definition": "A flaw or imperfection in software that can cause incorrect or unexpected results.",
      "example": "Defects are identified and removed during testing.",
      "examples": ["Defect density is a key software reliability metric."],
      "frequency_rank": 19,
      "tags": ["debugging", "error handling"],
      "related": ["bug", "fault", "error"],
      "synonyms": ["bug", "issue"],
      "antonyms": [],
      "pronunciation": "dɪˈfɛkt",
      "tts_text": "defect",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Defect removal improves software reliability."[1][3]
    },
    {
      "priority": 20,
      "word": "failure",
      "part_of_speech": "noun",
      "definition": "The inability of a system or component to perform its required function within specified limits.",
      "example": "System failure caused a service outage.",
      "examples": ["Failures may be caused by defects, faults, or external factors."],
      "frequency_rank": 20,
      "tags": ["debugging", "error handling"],
      "related": ["error", "fault", "defect"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈfeɪljər",
      "tts_text": "failure",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Reliability is measured by time between failures."[1][3][6]
    },
    {
      "priority": 21,
      "word": "regression",
      "part_of_speech": "noun",
      "definition": "A software bug where a previously working feature stops working after a change or update.",
      "example": "Regression bugs are found during regression testing.",
      "examples": ["Automated tests help catch regressions early."],
      "frequency_rank": 21,
      "tags": ["debugging", "error handling"],
      "related": ["bug", "test", "failure"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈɡrɛʃən",
      "tts_text": "regression",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Regression testing is critical for reliability."[1][3]
    },
    {
      "priority": 22,
      "word": "test coverage",
      "part_of_speech": "noun",
      "definition": "A metric indicating the percentage of code exercised by tests, used to assess the effectiveness of testing.",
      "example": "High test coverage increases confidence in code reliability.",
      "examples": ["Coverage tools highlight untested code paths."],
      "frequency_rank": 22,
      "tags": ["debugging", "testing"],
      "related": ["unit test", "integration test"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "tɛst ˈkʌvərɪdʒ",
      "tts_text": "test coverage",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Measured as a percentage of statements or branches."[1][3]
    },
    {
      "priority": 23,
      "word": "unit test",
      "part_of_speech": "noun",
      "definition": "A test that verifies the functionality of a specific section or unit of code in isolation.",
      "example": "Unit tests catch bugs early in development.",
      "examples": ["Unit tests are automated and run frequently."],
      "frequency_rank": 23,
      "tags": ["debugging", "testing"],
      "related": ["test coverage", "integration test"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈjuːnɪt tɛst",
      "tts_text": "unit test",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Unit testing is a best practice for reliability."[1][3]
    },
    {
      "priority": 24,
      "word": "integration test",
      "part_of_speech": "noun",
      "definition": "A test that verifies the interactions between integrated units or components of a system.",
      "example": "Integration tests ensure modules work together correctly.",
      "examples": ["Integration tests catch interface and data flow bugs."],
      "frequency_rank": 24,
      "tags": ["debugging", "testing"],
      "related": ["unit test", "test coverage"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌɪntɪˈɡreɪʃən tɛst",
      "tts_text": "integration test",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Integration tests increase system reliability."[1][3]
    },
    {
      "priority": 25,
      "word": "acceptance test",
      "part_of_speech": "noun",
      "definition": "A test performed to determine if a system meets the specified requirements and is ready for deployment.",
      "example": "Acceptance tests validate user requirements before release.",
      "examples": ["Acceptance testing is the final step before production."],
      "frequency_rank": 25,
      "tags": ["debugging", "testing"],
      "related": ["unit test", "integration test"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "əkˈsɛptəns tɛst",
      "tts_text": "acceptance test",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "Ensures software meets stakeholder needs."[1][3]
    },
    {
      "priority": 26,
      "word": "system test",
      "part_of_speech": "noun",
      "definition": "A test that evaluates the complete and integrated software system to ensure it meets requirements.",
      "example": "System tests simulate real-world usage scenarios.",
      "examples": ["System testing covers end-to-end functionality."],
      "frequency_rank": 26,
      "tags": ["debugging", "testing"],
      "related": ["acceptance test", "integration test"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈsɪstəm tɛst",
      "tts_text": "system test",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "B2",
      "language": "en",
      "notes": "System testing is essential for reliability."[1][3]
    },
    {
      "priority": 27,
      "word": "test plan",
      "part_of_speech": "noun",
      "definition": "A document outlining the scope, approach, resources, and schedule for intended testing activities.",
      "example": "A test plan ensures all features are verified.",
      "examples": ["Test plans define test cases and acceptance criteria."],
      "frequency_rank": 27,
      "tags": ["debugging", "testing"],
      "related": ["test case", "test coverage"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "tɛst plæn",
      "tts_text": "test plan",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Test plans improve process consistency."[1][3]
    },
    {
      "priority": 28,
      "word": "test case",
      "part_of_speech": "noun",
      "definition": "A set of conditions or variables under which a tester determines if a system or feature works as intended.",
      "example": "Each test case targets a specific function or scenario.",
      "examples": ["Test cases are executed during all test phases."],
      "frequency_rank": 28,
      "tags": ["debugging", "testing"],
      "related": ["test plan", "test coverage"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "tɛst keɪs",
      "tts_text": "test case",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Well-designed test cases find more defects."[1][3]
    },
    {
      "priority": 29,
      "word": "combinatorial testing",
      "part_of_speech": "noun",
      "definition": "A testing technique that uses combinations of input parameters to efficiently find defects.",
      "example": "Combinatorial testing uncovers faults missed by simple tests.",
      "examples": ["NIST studies show most faults are triggered by few factors."],
      "frequency_rank": 29,
      "tags": ["debugging", "testing"],
      "related": ["test case", "test coverage"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˌkɒmbɪnəˈtɔːriəl ˈtɛstɪŋ",
      "tts_text": "combinatorial testing",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Efficient for large input spaces."[3]
    },
    {
      "priority": 30,
      "word": "fault injection",
      "part_of_speech": "noun",
      "definition": "A technique for improving reliability by deliberately introducing faults to test error handling and resilience.",
      "example": "Fault injection tests how systems recover from failures.",
      "examples": ["Chaos engineering uses fault injection in production."],
      "frequency_rank": 30,
      "tags": ["debugging", "testing"],
      "related": ["failure", "resilience"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "fɔːlt ɪnˈdʒɛkʃən",
      "tts_text": "fault injection",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Used for chaos testing and SRE."[2][8]
    },
    {
      "priority": 31,
      "word": "chaos engineering",
      "part_of_speech": "noun",
      "definition": "The discipline of experimenting on a system by injecting faults to build confidence in its resilience and recovery.",
      "example": "Chaos engineering validates system reliability under stress.",
      "examples": ["Netflix pioneered chaos engineering with Chaos Monkey."],
      "frequency_rank": 31,
      "tags": ["debugging", "testing"],
      "related": ["fault injection", "resilience"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈkeɪɒs ˌɛnʤɪˈnɪərɪŋ",
      "tts_text": "chaos engineering",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Improves preparedness for real-world failures."[2][8]
    },
    {
      "priority": 32,
      "word": "resilience",
      "part_of_speech": "noun",
      "definition": "The ability of a system to recover from failures and continue operating correctly.",
      "example": "Resilience is a key goal of reliability engineering.",
      "examples": ["Self-healing systems are designed for resilience."],
      "frequency_rank": 32,
      "tags": ["debugging", "error handling"],
      "related": ["fault injection", "chaos engineering"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˈzɪliəns",
      "tts_text": "resilience",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Resilience is measured by recovery time and impact."[1][2][8]
    },
    {
      "priority": 33,
      "word": "mean time between failures",
      "part_of_speech": "noun",
      "definition": "A reliability metric representing the average time between system or component failures.",
      "example": "A higher mean time between failures indicates greater reliability.",
      "examples": ["MTBF is tracked for hardware and software systems."],
      "frequency_rank": 33,
      "tags": ["debugging", "reliability"],
      "related": ["failure", "reliability"],
      "synonyms": ["MTBF"],
      "antonyms": [],
      "pronunciation": "miːn taɪm bɪˈtwiːn ˈfeɪljərz",
      "tts_text": "mean time between failures",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "MTBF is a key reliability engineering metric."[1][3][6]
    },
    {
      "priority": 34,
      "word": "fault density",
      "part_of_speech": "noun",
      "definition": "The number of faults or defects per unit of code, often measured as faults per thousand lines of code (KLOC).",
      "example": "Reducing fault density improves software reliability.",
      "examples": ["Fault density is tracked during development and testing."],
      "frequency_rank": 34,
      "tags": ["debugging", "reliability"],
      "related": ["defect", "reliability"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "fɔːlt ˈdɛnsɪti",
      "tts_text": "fault density",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Used as a software reliability indicator."[1]
    },
    {
      "priority": 35,
      "word": "software reliability",
      "part_of_speech": "noun",
      "definition": "The probability that software will function without failure under specified conditions for a specified period of time.",
      "example": "Software reliability is improved by defect removal and testing.",
      "examples": ["Reliability is measured using metrics like MTBF and fault density."],
      "frequency_rank": 35,
      "tags": ["debugging", "reliability"],
      "related": ["fault density", "failure"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "ˈsɒftwɛər rɪˌlaɪəˈbɪləti",
      "tts_text": "software reliability",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C1",
      "language": "en",
      "notes": "Key aspect of system reliability engineering."[1][3]
    },
    {
      "priority": 36,
      "word": "reliability engineering",
      "part_of_speech": "noun",
      "definition": "The discipline focused on ensuring systems perform as expected over time, reducing failures and downtime.",
      "example": "Reliability engineering applies statistical methods to improve software robustness.",
      "examples": ["Reliability engineering includes fault analysis, testing, and metrics."],
      "frequency_rank": 36,
      "tags": ["debugging", "reliability"],
      "related": ["software reliability", "failure"],
      "synonyms": [],
      "antonyms": [],
      "pronunciation": "rɪˌlaɪəˈbɪləti ˌɛnʤɪˈnɪərɪŋ",
      "tts_text": "reliability engineering",
      "audio_url": "",
      "audio_url_online": "",
      "image_url": "",
      "image_url_online": "",
      "level": "C2",
      "language": "en",
      "notes": "Combines software and hardware reliability practices."[1][2][3][4][5][6][7][8][9]
    }
  ]
}
